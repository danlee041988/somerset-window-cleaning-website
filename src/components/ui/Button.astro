---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { CallToAction as Props } from '~/types';

const {
  variant = 'secondary',
  target,
  text = Astro.slots.render('default'),
  icon = '',
  class: className = '',
  type,
  ariaLabel,
  ariaPressed,
  ariaExpanded,
  ariaControls,
  ariaHaspopup,
  ariaDescribedby,
  ...rest
} = Astro.props;

const variants = {
  primary: 'btn-primary text-white',
  secondary: 'btn-secondary',
  tertiary: 'btn btn-tertiary',
  red: 'text-white bg-red-600 hover:bg-red-700 border border-red-600/30 hover:border-red-500 font-medium px-3 py-1.5 rounded-md transition-all duration-200 shadow-sm hover:shadow-md text-sm',
  whatsapp: 'btn-whatsapp',
  link: 'cursor-pointer hover:text-primary',
};

const forceWhite = variant === 'primary' || variant === 'secondary' || variant === 'whatsapp' || variant === 'red';

// Generate appropriate aria-label if not provided
const computedAriaLabel = ariaLabel || (icon && !text ? `Button with ${icon} icon` : undefined);
---

{
  type === 'button' || type === 'submit' || type === 'reset' ? (
    <button 
      type={type} 
      class={twMerge(variants[variant] || '', className)} 
      aria-label={computedAriaLabel}
      aria-pressed={ariaPressed}
      aria-expanded={ariaExpanded}
      aria-controls={ariaControls}
      aria-haspopup={ariaHaspopup}
      aria-describedby={ariaDescribedby}
      {...rest} 
      style={forceWhite ? 'color:#fff !important' : undefined}
    >
      <Fragment set:html={text} />
      {icon && <Icon name={icon} class="w-5 h-5 ml-1 -mr-1.5 rtl:mr-1 rtl:-ml-1.5 inline-block" aria-hidden="true" />}
    </button>
  ) : (
    <a
      class={twMerge(variants[variant] || '', className)}
      {...(target ? { target: target, rel: 'noopener noreferrer' } : {})}
      aria-label={computedAriaLabel}
      aria-pressed={ariaPressed}
      aria-expanded={ariaExpanded}
      aria-controls={ariaControls}
      aria-haspopup={ariaHaspopup}
      aria-describedby={ariaDescribedby}
      {...rest}
      style={forceWhite ? 'color:#fff !important' : undefined}
    >
      <Fragment set:html={text} />
      {icon && <Icon name={icon} class="w-5 h-5 ml-1 -mr-1.5 rtl:mr-1 rtl:-ml-1.5 inline-block" aria-hidden="true" />}
    </a>
  )
}
