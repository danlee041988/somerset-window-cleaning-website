---
export interface Props {
  heading?: string;
  subheading?: string;
  buttonText?: string;
}

const {
  heading = "Check if we cover your area",
  subheading = "Enter your postcode to see if we provide window cleaning services in your location",
  buttonText = "Check Coverage"
} = Astro.props;
---

<section class="relative py-16 bg-black">
  <div class="relative max-w-4xl mx-auto px-4 text-center">
    <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">{heading}</h2>
    <p class="text-lg text-gray-200 mb-8">{subheading}</p>
    
    <div class="max-w-md mx-auto">
      <form id="postcodeForm" class="flex flex-col sm:flex-row gap-3" novalidate>
        <input
          type="text"
          id="postcodeInput"
          name="postcode"
          placeholder="Postcode (e.g. BA5 1PF)"
          class="flex-1 px-6 py-4 rounded-xl bg-gradient-to-br from-gray-800 to-gray-900 border border-gray-700/50 focus:border-brand-red focus:ring-2 focus:ring-brand-red/50 focus:outline-none text-white text-lg placeholder-gray-500 shadow-lg"
          required
          autocomplete="postal-code"
        />
        <button
          type="submit"
          class="px-6 sm:px-8 py-4 bg-gradient-to-br from-brand-red to-red-700 hover:from-red-700 hover:to-red-800 text-white font-bold rounded-xl transition-all duration-300 flex items-center justify-center gap-2 sm:min-w-[180px] shadow-lg hover:shadow-brand-red/50 transform hover:scale-105 whitespace-nowrap"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <span id="buttonText">{buttonText}</span>
        </button>
      </form>
      
      <div id="postcodeResult" class="mt-6 hidden">
        <!-- Result will be inserted here -->
      </div>
    </div>
    
    <div class="mt-8 text-sm text-gray-400">
      <p>We cover 38+ postcodes across Somerset</p>
    </div>
  </div>
</section>

<!-- Celebration Overlay -->
<div id="celebrationOverlay" class="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 hidden">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-gradient-to-br from-gray-800 to-gray-900 rounded-2xl shadow-2xl max-w-md w-full p-8 transform scale-0 transition-all duration-500 border border-gray-700/50" id="celebrationCard">
      <div class="text-center">
        <h3 class="text-3xl font-bold text-white mb-3 drop-shadow-lg">Great News!</h3>
        <p class="text-xl text-gray-200 mb-6 font-medium">We cover your area! Let's get your windows sparkling clean.</p>
        <a href="/book-online" id="bookNowButton" class="inline-block px-10 py-4 bg-gradient-to-br from-brand-red to-red-700 hover:from-red-700 hover:to-red-800 text-white font-bold rounded-xl transition-all duration-300 text-lg shadow-lg hover:shadow-brand-red/50 hover:scale-105 transform" style="color: white !important;">
          <span style="color: white !important;">Book Your Service Now</span>
        </a>
        <p class="mt-4 text-gray-400 text-sm">Redirecting in <span id="countdown" class="text-gray-200">5</span> seconds...</p>
      </div>
    </div>
  </div>
</div>

<style>
  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }
  
  .shake {
    animation: shake 0.5s ease-in-out;
  }
  
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .slide-up {
    animation: slideUp 0.5s ease-out;
  }
</style>

<script>
  // List of covered postcode areas
  const coveredAreas = [
    'BA1', 'BA2', 'BA3', 'BA4', 'BA5', 'BA6', 'BA7', 'BA8', 'BA9', 'BA10', 
    'BA11', 'BA12', 'BA13', 'BA14', 'BA15', 'BA16', 'BA20', 'BA21', 'BA22',
    'TA1', 'TA2', 'TA3', 'TA4', 'TA5', 'TA6', 'TA7', 'TA8', 'TA9', 'TA10',
    'TA11', 'TA12', 'TA13', 'TA14', 'TA15', 'TA16', 'TA17', 'TA18', 'TA19',
    'TA20', 'TA21', 'TA22', 'TA23', 'TA24',
    'BS25', 'BS26', 'BS27', 'BS28' // Some North Somerset areas
  ];
  
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('postcodeForm');
    const input = document.getElementById('postcodeInput');
    const resultDiv = document.getElementById('postcodeResult');
    const overlay = document.getElementById('celebrationOverlay');
    const celebrationCard = document.getElementById('celebrationCard');
    const closeOverlay = document.getElementById('closeOverlay');
    const bookNowButton = document.getElementById('bookNowButton');
    
    // Early exit if postcode checker elements don't exist on this page
    if (!form || !input) {
      return;
    }
    
    // Check if there's a stored postcode
    const storedPostcode = localStorage.getItem('userPostcode');
    if (storedPostcode) {
      input.value = storedPostcode;
    }
    
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      let postcode = input.value.trim().toUpperCase();
      
      // Remove all spaces first for validation
      const postcodeNoSpaces = postcode.replace(/\s/g, '');
      
      // Validate postcode format (allowing various formats)
      // This regex allows for UK postcodes with or without spaces
      const postcodeRegex = /^[A-Z]{1,2}[0-9][A-Z0-9]?[0-9][A-Z]{2}$/;
      if (!postcodeRegex.test(postcodeNoSpaces)) {
        showResult('error', 'Please enter a valid UK postcode');
        input.classList.add('shake');
        setTimeout(() => input.classList.remove('shake'), 500);
        return;
      }
      
      // Format postcode with space (e.g., BA160HW -> BA16 0HW)
      const formattedPostcode = postcodeNoSpaces.replace(/^([A-Z]{1,2}[0-9][A-Z0-9]?)([0-9][A-Z]{2})$/, '$1 $2');
      
      // Extract postcode area (first part)
      const postcodeArea = postcodeNoSpaces.match(/^[A-Z]{1,2}[0-9][A-Z0-9]?/)?.[0] || '';
      
      // Check if we cover this area
      const isCovered = coveredAreas.some(area => postcodeArea.startsWith(area));
      
      if (isCovered) {
        // Store formatted postcode for later use
        localStorage.setItem('userPostcode', formattedPostcode);
        
        // Show celebration
        showCelebration();
      } else {
        showResult('not-covered', `We don't currently service ${postcodeArea} as standard, but we do cover further afield for larger properties and commercial work. Please contact us to discuss your requirements.`);
      }
    });
    
    function showResult(type, message) {
      resultDiv.innerHTML = '';
      resultDiv.classList.remove('hidden');
      
      if (type === 'error') {
        resultDiv.innerHTML = `
          <div class="bg-gradient-to-br from-red-900/50 to-red-950/50 border border-red-700/50 text-white px-6 py-4 rounded-xl slide-up shadow-lg">
            <p>${message}</p>
          </div>
        `;
      } else if (type === 'not-covered') {
        resultDiv.innerHTML = `
          <div class="bg-gradient-to-br from-gray-800 to-gray-900 border border-gray-700/50 text-gray-200 px-6 py-4 rounded-xl slide-up shadow-lg">
            <p class="mb-3">${message}</p>
            <button class="text-white hover:text-gray-200 underline hover:no-underline font-semibold transition-colors duration-200" onclick="window.location.href='/book-online'" style="color: white !important;">
              Request quote to join waiting list
            </button>
          </div>
        `;
      }
    }
    
    function showCelebration() {
      overlay.classList.remove('hidden');
      setTimeout(() => {
        celebrationCard.classList.add('scale-100');
      }, 100);
      
      // Add formatted postcode to book now link
      const postcode = input.value.trim().toUpperCase();
      const postcodeNoSpaces = postcode.replace(/\s/g, '');
      const formattedPostcode = postcodeNoSpaces.replace(/^([A-Z]{1,2}[0-9][A-Z0-9]?)([0-9][A-Z]{2})$/, '$1 $2');
      const bookingUrl = `/book-online?postcode=${encodeURIComponent(formattedPostcode)}`;
      bookNowButton.href = bookingUrl;
      
      // Start countdown and auto-redirect
      let countdown = 5;
      const countdownEl = document.getElementById('countdown');
      
      const countdownInterval = setInterval(() => {
        countdown--;
        if (countdownEl) {
          countdownEl.textContent = countdown.toString();
        }
        
        if (countdown <= 0) {
          clearInterval(countdownInterval);
          window.location.href = bookingUrl;
        }
      }, 1000);
      
      // Store interval ID to clear if user closes overlay
      overlay.dataset.countdownInterval = countdownInterval;
    }
    
    if (closeOverlay) {
      closeOverlay.addEventListener('click', function() {
        // Clear countdown if user closes manually
        const intervalId = overlay.dataset.countdownInterval;
        if (intervalId) {
          clearInterval(intervalId);
        }
        
        if (celebrationCard) {
          celebrationCard.classList.remove('scale-100');
        }
        setTimeout(() => {
          if (overlay) {
            overlay.classList.add('hidden');
          }
        }, 300);
      });
    }
    
    // Close overlay when clicking outside
    if (overlay) {
      overlay.addEventListener('click', function(e) {
      if (e.target === overlay) {
        // Clear countdown if user closes by clicking outside
        const intervalId = overlay.dataset.countdownInterval;
        if (intervalId) {
          clearInterval(intervalId);
        }
        
        if (celebrationCard) {
          celebrationCard.classList.remove('scale-100');
        }
        setTimeout(() => {
          if (overlay) {
            overlay.classList.add('hidden');
          }
        }, 300);
      }
      });
    }
  });
</script>