---
/**
 * Accessible Mobile Navigation Component
 * 
 * Implements WCAG 2.1 AA compliant mobile navigation:
 * - Proper ARIA labels and states
 * - Keyboard navigation support
 * - Focus management
 * - Screen reader friendly
 * - Touch-friendly targets (44px minimum)
 * - Clear visual feedback
 */

import { Icon } from 'astro-icon/components';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  links?: Array<MenuLink>;
  currentPath?: string;
}

const { links = [], currentPath = '' } = Astro.props;
---

<!-- Mobile Navigation Overlay -->
<div 
  id="mobile-nav-overlay" 
  class="fixed inset-0 bg-black/50 z-40 hidden"
  aria-hidden="true"
  data-mobile-overlay
>
</div>

<!-- Mobile Navigation Menu -->
<nav
  id="mobile-nav"
  class="fixed top-0 right-0 h-full w-80 max-w-[85vw] bg-white dark:bg-gray-900 z-50 transform translate-x-full transition-transform duration-300 ease-in-out shadow-2xl"
  aria-label="Mobile navigation"
  aria-hidden="true"
  data-mobile-nav
>
  <!-- Mobile Nav Header -->
  <div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
    <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Menu</h2>
    <button
      type="button"
      class="p-2 rounded-lg text-gray-500 hover:text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-gray-200 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-[44px] min-w-[44px]"
      aria-label="Close navigation menu"
      data-close-mobile-nav
    >
      <Icon name="tabler:x" class="w-6 h-6" />
    </button>
  </div>

  <!-- Mobile Nav Content -->
  <div class="flex flex-col h-full overflow-y-auto">
    <!-- Navigation Links -->
    <ul class="flex flex-col p-4 space-y-2" role="list">
      {links.map(({ text, href, links: subLinks }, index) => (
        <li>
          {subLinks?.length ? (
            <!-- Expandable Menu Item -->
            <div class="space-y-2">
              <button
                type="button"
                class="w-full flex items-center justify-between p-3 text-left text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-[44px] transition-colors"
                aria-expanded="false"
                aria-controls={`mobile-submenu-${index}`}
                data-mobile-submenu-toggle={index}
              >
                <span class="font-medium">{text}</span>
                <Icon 
                  name="tabler:chevron-down" 
                  class="w-5 h-5 transition-transform duration-200"
                  data-mobile-chevron={index}
                />
              </button>
              
              <!-- Submenu -->
              <ul
                id={`mobile-submenu-${index}`}
                class="hidden pl-4 space-y-1"
                role="list"
                data-mobile-submenu={index}
              >
                {subLinks.map(({ text: subText, href: subHref }) => (
                  <li>
                    <a
                      href={subHref}
                      class={`block p-3 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg min-h-[44px] flex items-center transition-colors ${subHref === currentPath ? 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 font-medium' : ''}`}
                      aria-current={subHref === currentPath ? 'page' : undefined}
                    >
                      {subText}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ) : (
            <!-- Regular Menu Item -->
            <a
              href={href}
              class={`block p-3 text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg min-h-[44px] flex items-center transition-colors ${href === currentPath ? 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 font-medium' : ''}`}
              aria-current={href === currentPath ? 'page' : undefined}
            >
              {text}
            </a>
          )}
        </li>
      ))}
    </ul>

    <!-- Quick Actions in Mobile Nav -->
    <div class="mt-auto p-4 border-t border-gray-200 dark:border-gray-700 space-y-3">
      <a
        href="/booking-2step"
        class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 min-h-[44px] flex items-center justify-center transition-colors"
      >
        <Icon name="tabler:calculator" class="w-5 h-5 mr-2" />
        Get FREE Quote
      </a>
      
      <a
        href="tel:07415526331"
        class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 min-h-[44px] flex items-center justify-center transition-colors"
      >
        <Icon name="tabler:phone" class="w-5 h-5 mr-2" />
        Call Now
      </a>
    </div>
  </div>
</nav>

<!-- Enhanced Mobile Menu Toggle Button -->
<button
  type="button"
  id="mobile-menu-toggle"
  class="md:hidden flex items-center justify-center w-12 h-12 rounded-lg text-white hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-white/20 transition-colors"
  aria-label="Open navigation menu"
  aria-expanded="false"
  aria-controls="mobile-nav"
  data-mobile-menu-toggle
>
  <span class="sr-only">Toggle navigation menu</span>
  <!-- Hamburger Icon -->
  <div class="w-6 h-6 flex flex-col justify-center items-center space-y-1.5" aria-hidden="true">
    <span class="block w-6 h-0.5 bg-white transition-all duration-300 ease-in-out" data-hamburger-line="1"></span>
    <span class="block w-6 h-0.5 bg-white transition-all duration-300 ease-in-out" data-hamburger-line="2"></span>
    <span class="block w-6 h-0.5 bg-white transition-all duration-300 ease-in-out" data-hamburger-line="3"></span>
  </div>
</button>

<style>
  /* Mobile nav animation states */
  .mobile-nav-open {
    transform: translateX(0);
  }
  
  /* Hamburger animation when menu is open */
  .hamburger-open [data-hamburger-line="1"] {
    transform: rotate(45deg) translate(3px, 3px);
  }
  
  .hamburger-open [data-hamburger-line="2"] {
    opacity: 0;
  }
  
  .hamburger-open [data-hamburger-line="3"] {
    transform: rotate(-45deg) translate(3px, -3px);
  }
  
  /* Focus management */
  .mobile-nav-open {
    visibility: visible;
  }
  
  /* Prevent body scroll when mobile nav is open */
  .mobile-nav-active {
    overflow: hidden;
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    nav[data-mobile-nav] {
      border: 2px solid;
    }
    
    button, a {
      border: 1px solid;
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    nav[data-mobile-nav],
    .mobile-nav-overlay,
    [data-hamburger-line] {
      transition: none;
    }
  }
</style>

<script>
  // Accessible Mobile Navigation Script
  class AccessibleMobileNav {
    constructor() {
      this.mobileNav = document.querySelector('[data-mobile-nav]');
      this.mobileOverlay = document.querySelector('[data-mobile-overlay]');
      this.toggleButton = document.querySelector('[data-mobile-menu-toggle]');
      this.closeButton = document.querySelector('[data-close-mobile-nav]');
      this.isOpen = false;
      this.focusableElements = [];
      this.firstFocusableElement = null;
      this.lastFocusableElement = null;
      
      this.init();
    }
    
    init() {
      // Bind event listeners
      this.toggleButton?.addEventListener('click', (e) => this.toggleMenu(e));
      this.closeButton?.addEventListener('click', (e) => this.closeMenu(e));
      this.mobileOverlay?.addEventListener('click', (e) => this.closeMenu(e));
      
      // Keyboard event listeners
      document.addEventListener('keydown', (e) => this.handleKeyDown(e));
      
      // Handle submenu toggles
      this.initSubMenus();
      
      // Handle window resize
      window.addEventListener('resize', () => this.handleResize());
    }
    
    initSubMenus() {
      const submenuToggles = document.querySelectorAll('[data-mobile-submenu-toggle]');
      
      submenuToggles.forEach((toggle) => {
        toggle.addEventListener('click', (e) => {
          e.preventDefault();
          const index = toggle.getAttribute('data-mobile-submenu-toggle');
          this.toggleSubMenu(index);
        });
      });
    }
    
    toggleSubMenu(index) {
      const toggle = document.querySelector(`[data-mobile-submenu-toggle="${index}"]`);
      const submenu = document.querySelector(`[data-mobile-submenu="${index}"]`);
      const chevron = document.querySelector(`[data-mobile-chevron="${index}"]`);
      
      if (!toggle || !submenu) return;
      
      const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
      
      // Toggle submenu
      toggle.setAttribute('aria-expanded', !isExpanded);
      submenu.classList.toggle('hidden');
      chevron?.classList.toggle('rotate-180');
      
      // Update focusable elements
      this.updateFocusableElements();
    }
    
    toggleMenu(e) {
      e.preventDefault();
      
      if (this.isOpen) {
        this.closeMenu();
      } else {
        this.openMenu();
      }
    }
    
    openMenu() {
      this.isOpen = true;
      
      // Update ARIA states
      this.toggleButton?.setAttribute('aria-expanded', 'true');
      this.toggleButton?.setAttribute('aria-label', 'Close navigation menu');
      this.mobileNav?.setAttribute('aria-hidden', 'false');
      
      // Show overlay and nav
      this.mobileOverlay?.classList.remove('hidden');
      this.mobileNav?.classList.add('mobile-nav-open');
      this.toggleButton?.classList.add('hamburger-open');
      
      // Prevent body scroll
      document.body.classList.add('mobile-nav-active');
      
      // Update focusable elements and set focus
      this.updateFocusableElements();
      
      // Focus the close button for better UX
      setTimeout(() => {
        this.closeButton?.focus();
      }, 300);
      
      // Announce to screen readers
      this.announceToScreenReader('Navigation menu opened');
    }
    
    closeMenu() {
      this.isOpen = false;
      
      // Update ARIA states
      this.toggleButton?.setAttribute('aria-expanded', 'false');
      this.toggleButton?.setAttribute('aria-label', 'Open navigation menu');
      this.mobileNav?.setAttribute('aria-hidden', 'true');
      
      // Hide overlay and nav
      this.mobileOverlay?.classList.add('hidden');
      this.mobileNav?.classList.remove('mobile-nav-open');
      this.toggleButton?.classList.remove('hamburger-open');
      
      // Restore body scroll
      document.body.classList.remove('mobile-nav-active');
      
      // Return focus to toggle button
      this.toggleButton?.focus();
      
      // Close any open submenus
      this.closeAllSubMenus();
      
      // Announce to screen readers
      this.announceToScreenReader('Navigation menu closed');
    }
    
    closeAllSubMenus() {
      const submenuToggles = document.querySelectorAll('[data-mobile-submenu-toggle]');
      const submenus = document.querySelectorAll('[data-mobile-submenu]');
      const chevrons = document.querySelectorAll('[data-mobile-chevron]');
      
      submenuToggles.forEach(toggle => toggle.setAttribute('aria-expanded', 'false'));
      submenus.forEach(submenu => submenu.classList.add('hidden'));
      chevrons.forEach(chevron => chevron.classList.remove('rotate-180'));
    }
    
    updateFocusableElements() {
      if (!this.isOpen) return;
      
      const focusableSelectors = [
        'button:not([disabled])',
        'a[href]',
        'input:not([disabled])',
        'select:not([disabled])',
        'textarea:not([disabled])',
        '[tabindex]:not([tabindex="-1"])'
      ];
      
      this.focusableElements = Array.from(
        this.mobileNav?.querySelectorAll(focusableSelectors.join(',')) || []
      ).filter(el => {
        const parent = el.closest('[data-mobile-submenu]');
        return !parent || !parent.classList.contains('hidden');
      });
      
      this.firstFocusableElement = this.focusableElements[0];
      this.lastFocusableElement = this.focusableElements[this.focusableElements.length - 1];
    }
    
    handleKeyDown(e) {
      if (!this.isOpen) return;
      
      switch (e.key) {
        case 'Escape':
          e.preventDefault();
          this.closeMenu();
          break;
          
        case 'Tab':
          if (this.focusableElements.length === 0) {
            e.preventDefault();
            return;
          }
          
          if (e.shiftKey) {
            // Shift + Tab
            if (document.activeElement === this.firstFocusableElement) {
              e.preventDefault();
              this.lastFocusableElement?.focus();
            }
          } else {
            // Tab
            if (document.activeElement === this.lastFocusableElement) {
              e.preventDefault();
              this.firstFocusableElement?.focus();
            }
          }
          break;
          
        case 'ArrowDown':
          e.preventDefault();
          this.focusNext();
          break;
          
        case 'ArrowUp':
          e.preventDefault();
          this.focusPrevious();
          break;
      }
    }
    
    focusNext() {
      const currentIndex = this.focusableElements.indexOf(document.activeElement);
      const nextIndex = (currentIndex + 1) % this.focusableElements.length;
      this.focusableElements[nextIndex]?.focus();
    }
    
    focusPrevious() {
      const currentIndex = this.focusableElements.indexOf(document.activeElement);
      const previousIndex = currentIndex === 0 ? this.focusableElements.length - 1 : currentIndex - 1;
      this.focusableElements[previousIndex]?.focus();
    }
    
    handleResize() {
      // Close mobile nav if window becomes wide enough for desktop nav
      if (window.innerWidth >= 768 && this.isOpen) {
        this.closeMenu();
      }
    }
    
    announceToScreenReader(message) {
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;
      
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    }
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new AccessibleMobileNav();
  });
</script>
