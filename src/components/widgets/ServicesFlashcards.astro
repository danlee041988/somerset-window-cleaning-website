---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  items: Array<{
    title: string;
    description: string;
    details?: string[];
    price?: string;
    callToAction?: {
      text: string;
      href: string;
    };
  }>;
  columns?: number;
  id?: string;
  isDark?: boolean;
  classes?: Record<string, string>;
  bg?: string;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  items = [],
  columns = 3,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />
  
  <div class={`grid gap-8 md:gap-6 ${
    columns === 2 
      ? 'md:grid-cols-2' 
      : columns === 3 
        ? 'md:grid-cols-2 lg:grid-cols-3' 
        : 'grid-cols-1'
  }`}>
    {items.map(({ title, description, details = [], price, callToAction }) => (
      <div class="service-card-container perspective-1000">
        <div class="service-card relative w-full h-[420px] md:h-[380px] lg:h-[420px] transition-transform duration-700 transform-style-preserve-3d cursor-pointer group">
          <!-- Front of card -->
          <div class="card-front absolute inset-0 w-full h-full backface-hidden rounded-2xl bg-white border border-gray-100 hover:border-red-200 p-8 flex flex-col shadow-lg hover:shadow-xl transition-all duration-300 group">
            <div class="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-red-500 to-red-600 rounded-t-2xl"></div>
            <div class="absolute top-6 right-6 w-12 h-12 bg-gradient-to-br from-red-500 to-red-600 rounded-xl flex items-center justify-center shadow-lg transform group-hover:scale-110 transition-transform duration-300">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <div class="relative flex-grow pt-4">
              <h3 class="text-2xl font-bold text-gray-900 mb-4 leading-tight group-hover:text-red-600 transition-colors duration-300">{title}</h3>
              <p class="text-gray-600 text-base leading-relaxed content-width">{description}</p>
            </div>
            <div class="absolute bottom-6 left-8 right-8">
              <div class="flex items-center text-red-500 font-medium text-sm group-hover:text-red-600 transition-colors duration-300">
                <span>Click to view details</span>
                <svg class="w-4 h-4 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </div>
            </div>
          </div>
          
          <!-- Back of card -->
          <div class="card-back absolute inset-0 w-full h-full backface-hidden rounded-2xl bg-gradient-to-br from-red-500 to-red-600 border border-red-400 p-8 flex flex-col justify-between rotate-y-180 shadow-2xl">
            <div class="absolute inset-0 bg-gradient-to-br from-white/10 via-transparent to-white/5 rounded-2xl"></div>
            <div class="relative">
              <div class="flex items-center gap-3 mb-6">
                <div class="w-12 h-12 bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center shadow-lg border border-white/30">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                </div>
                <h3 class="text-xl font-bold text-white">{title} Includes:</h3>
              </div>
              {details.length > 0 ? (
                <ul class="space-y-4">
                  {details.map((detail) => (
                    <li class="flex items-start gap-3">
                      <div class="w-6 h-6 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center mt-0.5 flex-shrink-0 border border-white/30">
                        <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7" />
                        </svg>
                      </div>
                      <span class="text-white/90 text-sm leading-relaxed font-medium">{detail}</span>
                    </li>
                  ))}
                </ul>
              ) : (
                <p class="text-white/90 text-sm leading-relaxed">{description}</p>
              )}
            </div>
            {callToAction && (
              <div class="relative">
                <a 
                  href={callToAction.href}
                  class="mt-6 inline-flex items-center justify-center w-full px-6 py-4 rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 hover:scale-105 transition-all duration-300 bg-white text-red-600 hover:bg-gray-50 font-semibold border border-white/20"
                >
                  {callToAction.text}
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </a>
              </div>
            )}
          </div>
        </div>
      </div>
    ))}
  </div>
</WidgetWrapper>

<style>
  .perspective-1000 {
    perspective: 1000px;
  }
  
  .transform-style-preserve-3d {
    transform-style: preserve-3d;
  }
  
  .backface-hidden {
    backface-visibility: hidden;
  }
  
  .rotate-y-180 {
    transform: rotateY(180deg);
  }
  
  .service-card.flipped {
    transform: rotateY(180deg);
  }
  
  /* Ensure smooth transitions */
  .service-card {
    transition: transform 0.7s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Enhanced hover effects for modern design */
  .service-card-container:hover .card-front {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 
      0 20px 40px rgba(239, 68, 68, 0.15),
      0 10px 20px rgba(0, 0, 0, 0.1),
      0 0 0 1px rgba(239, 68, 68, 0.1);
  }
  
  .service-card-container:hover .card-back {
    transform: translateY(-8px) scale(1.02) rotateY(180deg);
    box-shadow: 
      0 25px 50px rgba(239, 68, 68, 0.3),
      0 15px 30px rgba(0, 0, 0, 0.2);
  }
  
  /* Modern card effects */
  .card-front {
    backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.95);
  }
  
  /* Subtle glow on hover */
  .service-card-container:hover .card-front {
    background: rgba(255, 255, 255, 1);
  }
  
  /* Red accent animations */
  .card-front:hover .absolute.top-6.right-6 {
    transform: rotate(360deg) scale(1.1);
    transition: transform 0.6s ease-in-out;
  }
  
  /* Subtle animation on load */
  .service-card-container {
    animation: slideUp 0.6s ease-out forwards;
    opacity: 0;
    transform: translateY(30px);
  }
  
  @keyframes slideUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Stagger animation delay */
  .service-card-container:nth-child(1) { animation-delay: 0.1s; }
  .service-card-container:nth-child(2) { animation-delay: 0.2s; }
  .service-card-container:nth-child(3) { animation-delay: 0.3s; }
  .service-card-container:nth-child(4) { animation-delay: 0.4s; }
  .service-card-container:nth-child(5) { animation-delay: 0.5s; }
  .service-card-container:nth-child(6) { animation-delay: 0.6s; }

  /* Mobile tap highlight removal */
  .service-card {
    -webkit-tap-highlight-color: transparent;
  }
  /* Service card button styles */
  .service-card-container a[href*="/services/"] {
    color: white !important;
  }
  
  .service-card-container .card-back a {
    color: white !important;
  }
</style>

<script>
  // Add click handlers to all flashcards
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.service-card');
    
    cards.forEach(card => {
      card.addEventListener('click', () => {
        card.classList.toggle('flipped');
      });
      
      // Keyboard accessibility
      card.setAttribute('tabindex', '0');
      card.setAttribute('role', 'button');
      card.setAttribute('aria-label', 'Click to flip card and see details');
      
      card.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          card.classList.toggle('flipped');
        }
      });
    });
  });
</script>