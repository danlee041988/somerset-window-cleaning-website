---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  items: Array<{
    title: string;
    description: string;
    details?: string[];
    price?: string;
    callToAction?: {
      text: string;
      href: string;
    };
  }>;
  columns?: number;
  id?: string;
  isDark?: boolean;
  classes?: Record<string, string>;
  bg?: string;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  items = [],
  columns = 3,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />
  
  <div class={`grid gap-8 md:gap-6 ${
    columns === 2 
      ? 'md:grid-cols-2' 
      : columns === 3 
        ? 'md:grid-cols-2 lg:grid-cols-3' 
        : 'grid-cols-1'
  }`}>
    {items.map(({ title, description, details = [], price, callToAction }) => (
      <div class="service-card-container perspective-1000">
        <div class="service-card relative w-full h-[420px] md:h-[380px] lg:h-[420px] transition-transform duration-700 transform-style-preserve-3d cursor-pointer group">
          <!-- Front of card -->
          <div class="card-front absolute inset-0 w-full h-full backface-hidden rounded-2xl bg-gradient-to-br from-gray-800 to-gray-900 border border-gray-700/50 hover:border-gray-600 p-6 flex flex-col shadow-xl hover:shadow-2xl transition-all duration-300">
            <div class="absolute inset-0 bg-gradient-to-br from-black/20 via-transparent to-black/10 rounded-2xl opacity-50"></div>
            <div class="relative flex-grow">
              <h3 class="text-2xl font-bold text-white mb-4 leading-tight">{title}</h3>
              <p class="text-gray-200 text-base leading-relaxed content-width">{description}</p>
            </div>
          </div>
          
          <!-- Back of card -->
          <div class="card-back absolute inset-0 w-full h-full backface-hidden rounded-2xl bg-gradient-to-br from-gray-800 to-gray-900 border border-gray-700/50 p-6 flex flex-col justify-between rotate-y-180 shadow-2xl">
            <div class="absolute inset-0 bg-gradient-to-br from-black/20 via-transparent to-black/10 rounded-2xl opacity-50"></div>
            <div class="relative">
              <div class="flex items-center gap-3 mb-6">
                <div class="w-10 h-10 bg-gradient-to-br from-success to-green-600 rounded-lg flex items-center justify-center shadow-lg">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                </div>
                <h3 class="text-xl font-bold text-white">{title} Includes:</h3>
              </div>
              {details.length > 0 ? (
                <ul class="space-y-3">
                  {details.map((detail) => (
                    <li class="flex items-start gap-3">
                      <div class="w-5 h-5 bg-gradient-to-br from-success to-green-600 rounded-full flex items-center justify-center mt-0.5 flex-shrink-0">
                        <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7" />
                        </svg>
                      </div>
                      <span class="text-gray-200 text-sm leading-relaxed content-width">{detail}</span>
                    </li>
                  ))}
                </ul>
              ) : (
                <p class="text-gray-200 text-sm leading-relaxed content-width">{description}</p>
              )}
            </div>
            {callToAction && (
              <div class="relative">
                <a 
                  href={callToAction.href}
                  class="mt-6 inline-flex items-center justify-center w-full px-6 py-4 rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-300 bg-gray-700 hover:bg-gray-600 text-white border border-gray-600"
                >
                  {callToAction.text}
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </a>
              </div>
            )}
          </div>
        </div>
      </div>
    ))}
  </div>
</WidgetWrapper>

<style>
  .perspective-1000 {
    perspective: 1000px;
  }
  
  .transform-style-preserve-3d {
    transform-style: preserve-3d;
  }
  
  .backface-hidden {
    backface-visibility: hidden;
  }
  
  .rotate-y-180 {
    transform: rotateY(180deg);
  }
  
  .service-card.flipped {
    transform: rotateY(180deg);
  }
  
  /* Ensure smooth transitions */
  .service-card {
    transition: transform 0.7s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Enhanced hover effects */
  .service-card-container:hover .card-front,
  .service-card-container:hover .card-back {
    transform: translateY(-2px);
    box-shadow: 
      0 10px 20px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    border-radius: 1.125rem;
  }
  
  /* Modern glassmorphism effect */
  .card-front::before,
  .card-back::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);
    border-radius: 1rem;
    pointer-events: none;
  }
  
  /* Subtle animation on load */
  .service-card-container {
    animation: slideUp 0.6s ease-out forwards;
    opacity: 0;
    transform: translateY(30px);
  }
  
  @keyframes slideUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Stagger animation delay */
  .service-card-container:nth-child(1) { animation-delay: 0.1s; }
  .service-card-container:nth-child(2) { animation-delay: 0.2s; }
  .service-card-container:nth-child(3) { animation-delay: 0.3s; }
  .service-card-container:nth-child(4) { animation-delay: 0.4s; }
  .service-card-container:nth-child(5) { animation-delay: 0.5s; }
  .service-card-container:nth-child(6) { animation-delay: 0.6s; }

  /* Mobile tap highlight removal */
  .service-card {
    -webkit-tap-highlight-color: transparent;
  }
  /* Service card button styles */
  .service-card-container a[href*="/services/"] {
    color: white !important;
  }
  
  .service-card-container .card-back a {
    color: white !important;
  }
</style>

<script>
  // Add click handlers to all flashcards
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.service-card');
    
    cards.forEach(card => {
      card.addEventListener('click', () => {
        card.classList.toggle('flipped');
      });
      
      // Keyboard accessibility
      card.setAttribute('tabindex', '0');
      card.setAttribute('role', 'button');
      card.setAttribute('aria-label', 'Click to flip card and see details');
      
      card.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          card.classList.toggle('flipped');
        }
      });
    });
  });
</script>