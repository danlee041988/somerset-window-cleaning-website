---
// BookingCalendar.astro - Advanced booking calendar with availability
---

<div class="booking-calendar-container">
  <div class="calendar-header">
    <h3 class="text-2xl font-bold text-gray-800 mb-4">Choose Your Service Date</h3>
    <p class="text-gray-600 mb-6">Select an available date and time for your window cleaning service</p>
  </div>

  <div class="calendar-wrapper bg-white rounded-lg shadow-lg p-6">
    <!-- Calendar will be implemented here -->
    <div id="calendar-container" class="calendar-grid">
      <!-- Month/Year selector -->
      <div class="calendar-controls flex justify-between items-center mb-4">
        <button id="prev-month" class="p-2 hover:bg-gray-100 rounded-lg">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"/>
          </svg>
        </button>
        <h4 id="current-month" class="text-xl font-semibold text-gray-800">December 2024</h4>
        <button id="next-month" class="p-2 hover:bg-gray-100 rounded-lg">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
          </svg>
        </button>
      </div>

      <!-- Days of week -->
      <div class="calendar-days grid grid-cols-7 gap-2 mb-2">
        <div class="day-header text-center text-sm font-medium text-gray-500">Sun</div>
        <div class="day-header text-center text-sm font-medium text-gray-500">Mon</div>
        <div class="day-header text-center text-sm font-medium text-gray-500">Tue</div>
        <div class="day-header text-center text-sm font-medium text-gray-500">Wed</div>
        <div class="day-header text-center text-sm font-medium text-gray-500">Thu</div>
        <div class="day-header text-center text-sm font-medium text-gray-500">Fri</div>
        <div class="day-header text-center text-sm font-medium text-gray-500">Sat</div>
      </div>

      <!-- Calendar days -->
      <div id="calendar-days" class="calendar-days grid grid-cols-7 gap-2">
        <!-- Days will be populated by JavaScript -->
      </div>
    </div>

    <!-- Time slots -->
    <div id="time-slots" class="time-slots mt-6 hidden">
      <h4 class="text-lg font-semibold text-gray-800 mb-4">Available Times</h4>
      <div class="time-grid grid grid-cols-2 md:grid-cols-3 gap-3">
        <!-- Time slots will be populated by JavaScript -->
      </div>
    </div>

    <!-- Selected date/time display -->
    <div id="selected-datetime" class="selected-datetime mt-6 p-4 bg-blue-50 rounded-lg hidden">
      <h5 class="font-semibold text-blue-800">Selected Service Time:</h5>
      <p id="selected-datetime-text" class="text-blue-700"></p>
      <button id="change-datetime" class="mt-2 text-sm text-blue-600 hover:text-blue-800">Change Selection</button>
    </div>
  </div>
</div>

<script>
// Simple calendar implementation
class BookingCalendar {
  constructor(container) {
    this.container = container;
    this.currentDate = new Date();
    this.selectedDate = null;
    this.selectedTime = null;
    this.availableTimes = ['9:00 AM', '10:00 AM', '11:00 AM', '1:00 PM', '2:00 PM', '3:00 PM'];

    this.init();
  }

  init() {
    this.renderCalendar();
    this.bindEvents();
  }

  renderCalendar() {
    this.renderDays();
    this.updateMonthDisplay();
  }

  renderDays() {
    const calendarDays = this.container.querySelector('#calendar-days');
    const firstDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
    const lastDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());

    calendarDays.innerHTML = '';

    const today = new Date();
    const isCurrentMonth = (date) => date.getMonth() === this.currentDate.getMonth();

    for (let i = 0; i < 42; i++) {
      const day = new Date(startDate);
      day.setDate(startDate.getDate() + i);

      const dayElement = document.createElement('div');
      const dayNumber = day.getDate();

      dayElement.className = `calendar-day p-3 text-center cursor-pointer rounded-lg border ${
        isCurrentMonth(day) ? 'text-gray-900 hover:bg-blue-50 hover:border-blue-200' : 'text-gray-400'
      } ${this.isDateSelected(day) ? 'bg-blue-500 text-white border-blue-500' : 'border-gray-200'}`;

      dayElement.textContent = dayNumber;

      // Disable past dates and weekends
      const isPast = day < today.setHours(0,0,0,0);
      const isWeekend = day.getDay() === 0 || day.getDay() === 6;

      if (isPast) {
        dayElement.className += ' opacity-50 cursor-not-allowed';
        dayElement.style.pointerEvents = 'none';
      } else if (isWeekend) {
        dayElement.className += ' bg-red-50 border-red-200 text-red-700';
        dayElement.title = 'Weekend - limited availability';
      } else {
        dayElement.addEventListener('click', () => this.selectDate(day));
      }

      calendarDays.appendChild(dayElement);
    }
  }

  selectDate(date) {
    this.selectedDate = date;
    this.renderCalendar();
    this.showTimeSlots();
  }

  showTimeSlots() {
    const timeSlots = this.container.querySelector('#time-slots');
    const timeGrid = timeSlots.querySelector('.time-grid');

    timeGrid.innerHTML = '';

    this.availableTimes.forEach(time => {
      const timeButton = document.createElement('button');
      timeButton.className = `time-slot p-3 text-center rounded-lg border hover:bg-green-50 hover:border-green-200 transition-colors ${
        this.selectedTime === time ? 'bg-green-500 text-white border-green-500' : 'border-gray-200 text-gray-700'
      }`;
      timeButton.textContent = time;
      timeButton.addEventListener('click', () => this.selectTime(time));
      timeGrid.appendChild(timeButton);
    });

    timeSlots.classList.remove('hidden');
  }

  selectTime(time) {
    this.selectedTime = time;
    this.updateSelectedDisplay();
    this.showConfirmation();
  }

  updateSelectedDisplay() {
    const selectedDisplay = this.container.querySelector('#selected-datetime');
    const selectedText = selectedDisplay.querySelector('#selected-datetime-text');

    if (this.selectedDate && this.selectedTime) {
      const formattedDate = this.selectedDate.toLocaleDateString('en-GB', {
        weekday: 'long',
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });

      selectedText.textContent = `${formattedDate} at ${this.selectedTime}`;
      selectedDisplay.classList.remove('hidden');

      // Dispatch event for parent components
      this.container.dispatchEvent(new CustomEvent('datetime-selected', {
        detail: { date: this.selectedDate, time: this.selectedTime }
      }));
    }
  }

  showConfirmation() {
    // Update time slot styling
    const timeButtons = this.container.querySelectorAll('.time-slot');
    timeButtons.forEach(button => {
      if (button.textContent === this.selectedTime) {
        button.classList.add('bg-green-500', 'text-white', 'border-green-500');
      } else {
        button.classList.remove('bg-green-500', 'text-white', 'border-green-500');
      }
    });
  }

  isDateSelected(date) {
    return this.selectedDate &&
           date.toDateString() === this.selectedDate.toDateString();
  }

  updateMonthDisplay() {
    const monthDisplay = this.container.querySelector('#current-month');
    const options = { year: 'numeric', month: 'long' };
    monthDisplay.textContent = this.currentDate.toLocaleDateString('en-GB', options);
  }

  bindEvents() {
    const prevButton = this.container.querySelector('#prev-month');
    const nextButton = this.container.querySelector('#next-month');
    const changeButton = this.container.querySelector('#change-datetime');

    prevButton.addEventListener('click', () => {
      this.currentDate.setMonth(this.currentDate.getMonth() - 1);
      this.renderCalendar();
    });

    nextButton.addEventListener('click', () => {
      this.currentDate.setMonth(this.currentDate.getMonth() + 1);
      this.renderCalendar();
    });

    if (changeButton) {
      changeButton.addEventListener('click', () => {
        const selectedDisplay = this.container.querySelector('#selected-datetime');
        selectedDisplay.classList.add('hidden');
        this.selectedTime = null;
      });
    }
  }
}

// Initialize calendar when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const container = document.querySelector('.booking-calendar-container');
  if (container) {
    new BookingCalendar(container);
  }
});
</script>

<style>
.booking-calendar-container {
  max-width: 600px;
  margin: 0 auto;
}

.calendar-day {
  transition: all 0.2s ease;
}

.time-slot {
  transition: all 0.2s ease;
  font-weight: 500;
}

.time-slot:hover:not(.bg-green-500) {
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
</style>

