---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Faqs as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  items = [],
  columns = 2,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <!-- Modern Accordion with Black & Red Design -->
  <div class={`${columns === 1 ? 'max-w-4xl mx-auto' : ''} space-y-3`} role="region" aria-label="Frequently Asked Questions">
    {items.map((item, index) => {
      const panelId = `faq-panel-${index}`;
      const buttonId = `faq-button-${index}`;
      return (
        <div class="faq-item bg-gray-900 rounded-lg overflow-hidden border border-gray-800 hover:border-red-900/50 transition-all duration-300 shadow-lg hover:shadow-red-900/20" data-faq-item>
          <h3 class="m-0">
            <button
              id={buttonId}
              class="faq-button w-full text-left px-6 py-5 flex items-center justify-between gap-4 focus:outline-none focus-visible:ring-2 focus-visible:ring-red-500 min-h-[64px] group transition-all duration-300 hover:bg-gray-800/50"
              type="button"
              aria-controls={panelId}
              aria-expanded="false"
              data-accordion-button
            >
              <span class="text-lg font-semibold text-white group-hover:text-red-400 transition-colors duration-300 flex items-center gap-3">
                <span class="w-1 h-8 bg-red-500 rounded-full transition-all duration-300 group-hover:h-10 group-hover:bg-red-400" aria-hidden="true"></span>
                {item.title}
              </span>
              <span class="faq-icon-wrapper flex items-center justify-center w-10 h-10 rounded-full bg-gray-800 group-hover:bg-red-900/30 transition-all duration-300">
                <svg class="faq-icon w-6 h-6 text-gray-400 group-hover:text-red-400 transition-all duration-300" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true" data-accordion-icon>
                  <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
                </svg>
              </span>
            </button>
          </h3>
          <div 
            id={panelId} 
            role="region" 
            aria-labelledby={buttonId} 
            class="faq-panel hidden" 
            data-accordion-panel
          >
            <div class="px-6 pb-6 pt-2 text-gray-300 leading-relaxed border-t border-gray-800/50">
              <div class="faq-content" set:html={item.description} />
            </div>
          </div>
        </div>
      );
    })}
  </div>

  <script is:inline>
    // Enhanced accordion with smooth animations
    (function(){
      const root = document.currentScript?.parentElement;
      if (!root) return;
      const buttons = root.querySelectorAll('[data-accordion-button]');
      
      buttons.forEach((btn) => {
        const panel = root.querySelector('#' + btn.getAttribute('aria-controls'));
        const icon = btn.querySelector('[data-accordion-icon]');
        const iconWrapper = btn.querySelector('.faq-icon-wrapper');
        const faqItem = btn.closest('[data-faq-item]');
        if (!panel) return;
        
        // Set initial max-height for animation
        panel.style.maxHeight = '0px';
        panel.style.overflow = 'hidden';
        panel.style.transition = 'max-height 0.3s ease-out, opacity 0.3s ease-out';
        panel.style.opacity = '0';
        
        btn.addEventListener('click', () => {
          const expanded = btn.getAttribute('aria-expanded') === 'true';
          
          // Close all others
          buttons.forEach((b) => {
            const p = root.querySelector('#' + b.getAttribute('aria-controls'));
            const i = b.querySelector('[data-accordion-icon]');
            const iw = b.querySelector('.faq-icon-wrapper');
            const fi = b.closest('[data-faq-item]');
            if (p && b !== btn) {
              b.setAttribute('aria-expanded', 'false');
              p.classList.add('hidden');
              p.style.maxHeight = '0px';
              p.style.opacity = '0';
              i && i.classList.remove('rotate-180');
              iw && iw.classList.remove('bg-red-500', 'scale-110');
              fi && fi.classList.remove('border-red-500', 'bg-gray-800/50');
            }
          });
          
          // Toggle current
          btn.setAttribute('aria-expanded', String(!expanded));
          
          if (expanded) {
            // Close
            panel.style.maxHeight = '0px';
            panel.style.opacity = '0';
            setTimeout(() => panel.classList.add('hidden'), 300);
            icon && icon.classList.remove('rotate-180');
            iconWrapper && iconWrapper.classList.remove('bg-red-500', 'scale-110');
            faqItem && faqItem.classList.remove('border-red-500', 'bg-gray-800/50');
          } else {
            // Open
            panel.classList.remove('hidden');
            // Force reflow
            panel.offsetHeight;
            panel.style.maxHeight = panel.scrollHeight + 'px';
            panel.style.opacity = '1';
            icon && icon.classList.add('rotate-180');
            iconWrapper && iconWrapper.classList.add('bg-red-500', 'scale-110');
            faqItem && faqItem.classList.add('border-red-500', 'bg-gray-800/50');
          }
        });
      });
    })();
  </script>

  <style is:inline>
    /* Enhanced FAQ Styles */
    [data-accordion-icon] { 
      transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), color 0.3s ease; 
    }
    
    .faq-icon-wrapper {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .faq-icon-wrapper.scale-110 {
      transform: scale(1.1);
    }
    
    .faq-item {
      position: relative;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .faq-item::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 3px;
      background: transparent;
      transition: background 0.3s ease;
    }
    
    .faq-item:hover::before {
      background: linear-gradient(to bottom, #dc2626, #991b1b);
    }
    
    .faq-content a {
      color: #ef4444;
      text-decoration: underline;
      transition: color 0.2s ease;
    }
    
    .faq-content a:hover {
      color: #f87171;
      text-decoration: none;
    }
    
    /* Smooth panel animations */
    .faq-panel {
      transform-origin: top;
    }
    
    /* Active state styles */
    [aria-expanded="true"] .faq-icon {
      color: #ef4444 !important;
    }
    
    /* Reduced motion support */
    @media (prefers-reduced-motion: reduce) {
      .faq-item,
      .faq-icon-wrapper,
      [data-accordion-icon],
      .faq-panel {
        transition: none !important;
      }
    }
  </style>
</WidgetWrapper>
