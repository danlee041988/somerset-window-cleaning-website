---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import AccessibleMobileNav from '~/components/widgets/AccessibleMobileNav.astro';
import Button from '~/components/ui/Button.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash, getAsset } from '~/utils/permalinks';
import type { CallToAction } from '~/types';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<style>
  /* Force all header navigation text to be white with highest specificity */
  #header nav ul li a,
  #header nav ul li button,
  #header nav a,
  #header nav button,
  #header .aw-link-active,
  #header a[aria-current="page"],
  header nav ul li a,
  header nav ul li button,
  header nav a,
  header nav button {
    color: white !important;
  }
  
  #header nav ul li a:hover,
  #header nav ul li button:hover,
  #header nav a:hover,
  #header nav button:hover,
  header nav ul li a:hover,
  header nav ul li button:hover {
    color: rgba(255, 255, 255, 0.8) !important;
  }

  /* Override any red color classes specifically */
  #header .text-red-400,
  #header .hover\:text-red-400:hover,
  header .text-red-400,
  header .hover\:text-red-400:hover {
    color: white !important;
  }
</style>

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out bg-black text-white',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-default py-1 px-3 md:px-6 mx-auto w-full header-inner transition-all duration-300 ease-in-out',
      {
        'md:flex md:justify-between': position !== 'center',
      },
      {
        'md:grid md:grid-cols-3 md:items-center': position === 'center',
      },
      {
        'max-w-5xl': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <AccessibleMobileNav links={links} currentPath={currentPath} />
      </div>
    </div>
    <nav
      class="items-center w-full md:w-auto hidden md:flex md:mx-5 text-slate-100 overflow-y-auto overflow-x-hidden md:overflow-y-visible md:overflow-x-auto md:justify-self-center"
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col md:flex-row md:self-center w-full md:w-auto text-xl md:text-[0.9375rem] tracking-[0.01rem] font-medium md:justify-center"
      >
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="px-3 py-2 flex items-center whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-white/20 rounded min-h-[44px]"
                    style="color: white !important;"
                    aria-expanded="false"
                    aria-haspopup="true"
                    aria-label={`${text} submenu`}
                    data-dropdown-toggle
                  >
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline transition-transform duration-200" data-dropdown-chevron />
                  </button>
                  <ul 
                    class="dropdown-menu md:backdrop-blur-md rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-black/95 md:min-w-[200px] drop-shadow-xl md:border md:border-white/10"
                    role="menu"
                    aria-label={`${text} submenu`}
                    data-dropdown-menu
                  >
                    {links.map(({ text: text2, href: href2 }) => (
                      <li role="none">
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b md:hover:bg-white/10 hover:text-white md:text-white py-2 px-5 block whitespace-no-wrap focus:outline-none focus:ring-2 focus:ring-white/20 min-h-[44px] flex items-center transition-colors',
                            { 'aw-link-active': href2 === currentPath },
                          ]}
                          href={href2}
                          role="menuitem"
                          aria-current={href2 === currentPath ? 'page' : undefined}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'px-3 py-2 flex items-center whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-white/20 rounded min-h-[44px] transition-colors',
                    { 'aw-link-active font-medium': href === currentPath },
                  ]}
                  style="color: white !important;"
                  href={href}
                  aria-current={href === currentPath ? 'page' : undefined}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:self-center md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0 md:justify-self-end',
      ]}
    >
      <div class="items-center flex justify-between w-full md:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
          {
            showRssFeed && (
              <a
                class="text-white hover:bg-white/10 focus:outline-none focus:ring-4 focus:ring-white/20 rounded-lg text-sm p-2.5 inline-flex items-center"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="w-5 h-5" />
              </a>
            )
          }
        </div>
        { '' }
      </div>
    </div>
  </div>
</header>

<script>
  // Enhanced accessible header with dropdown functionality
  document.addEventListener('DOMContentLoaded', function() {
    const header = document.querySelector('[data-aw-sticky-header]');

    if (header) {
      // Simple sticky behavior without visual changes
      let lastScrollY = 0;

      function handleScroll() {
        const scrollY = window.pageYOffset || document.documentElement.scrollTop;
        lastScrollY = scrollY;
      }

      window.addEventListener('scroll', handleScroll, { passive: true });
      handleScroll();
    }

    // Enhanced accessible dropdown functionality
    class AccessibleDropdown {
      constructor() {
        this.dropdowns = document.querySelectorAll('[data-dropdown-toggle]');
        this.activeDropdown = null;
        this.init();
      }

      init() {
        this.dropdowns.forEach(toggle => {
          const menu = toggle.nextElementSibling;
          if (menu && menu.hasAttribute('data-dropdown-menu')) {
            // Click events
            toggle.addEventListener('click', (e) => this.toggleDropdown(e, toggle, menu));
            
            // Hover events for desktop
            toggle.parentElement.addEventListener('mouseenter', () => {
              if (window.innerWidth >= 768) {
                this.openDropdown(toggle, menu);
              }
            });
            
            toggle.parentElement.addEventListener('mouseleave', () => {
              if (window.innerWidth >= 768) {
                this.closeDropdown(toggle, menu);
              }
            });

            // Keyboard events
            toggle.addEventListener('keydown', (e) => this.handleKeyDown(e, toggle, menu));
            
            // Focus events
            menu.addEventListener('focusout', (e) => {
              // Close dropdown if focus moves outside
              setTimeout(() => {
                if (!toggle.parentElement.contains(document.activeElement)) {
                  this.closeDropdown(toggle, menu);
                }
              }, 100);
            });
          }
        });

        // Close dropdowns when clicking outside
        document.addEventListener('click', (e) => {
          if (!e.target.closest('.dropdown')) {
            this.closeAllDropdowns();
          }
        });

        // Close dropdowns on escape
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape') {
            this.closeAllDropdowns();
            this.activeDropdown?.focus();
          }
        });
      }

      toggleDropdown(e, toggle, menu) {
        e.preventDefault();
        const isOpen = toggle.getAttribute('aria-expanded') === 'true';
        
        if (isOpen) {
          this.closeDropdown(toggle, menu);
        } else {
          this.closeAllDropdowns();
          this.openDropdown(toggle, menu);
        }
      }

      openDropdown(toggle, menu) {
        // Update ARIA states
        toggle.setAttribute('aria-expanded', 'true');
        
        // Show menu
        menu.classList.remove('md:hidden');
        menu.classList.add('md:block');
        
        // Rotate chevron
        const chevron = toggle.querySelector('[data-dropdown-chevron]');
        chevron?.classList.add('rotate-180');
        
        this.activeDropdown = toggle;
      }

      closeDropdown(toggle, menu) {
        // Update ARIA states
        toggle.setAttribute('aria-expanded', 'false');
        
        // Hide menu
        menu.classList.add('md:hidden');
        menu.classList.remove('md:block');
        
        // Reset chevron
        const chevron = toggle.querySelector('[data-dropdown-chevron]');
        chevron?.classList.remove('rotate-180');
        
        if (this.activeDropdown === toggle) {
          this.activeDropdown = null;
        }
      }

      closeAllDropdowns() {
        this.dropdowns.forEach(toggle => {
          const menu = toggle.nextElementSibling;
          if (menu && menu.hasAttribute('data-dropdown-menu')) {
            this.closeDropdown(toggle, menu);
          }
        });
      }

      handleKeyDown(e, toggle, menu) {
        const isOpen = toggle.getAttribute('aria-expanded') === 'true';
        
        switch (e.key) {
          case 'ArrowDown':
            e.preventDefault();
            if (!isOpen) {
              this.openDropdown(toggle, menu);
            }
            // Focus first menu item
            const firstItem = menu.querySelector('[role="menuitem"]');
            firstItem?.focus();
            break;
            
          case 'ArrowUp':
            e.preventDefault();
            if (isOpen) {
              this.closeDropdown(toggle, menu);
            }
            break;
            
          case 'Enter':
          case ' ':
            e.preventDefault();
            this.toggleDropdown(e, toggle, menu);
            break;
        }
      }
    }

    // Initialize accessible dropdowns
    new AccessibleDropdown();
  });
</script>

<style>
  /* Smooth header transition on scroll */
  #header[data-aw-sticky-header] {
    transition: background-color 200ms ease, backdrop-filter 200ms ease, box-shadow 200ms ease;
  }

  /* Reduce inner padding when scrolled */
  #header .header-inner {
    transition: padding 200ms ease;
  }

  /* On scroll: subtle blur, compact height, slight shadow */
  #header.scroll {
    background-color: #000 !important;
    backdrop-filter: none !important;
    box-shadow: none !important;
  }

  #header.scroll .header-inner {
    padding-top: 0.2rem !important;
    padding-bottom: 0.2rem !important;
  }

  /* Ensure CTAs remain visually prominent */
  #header.scroll .main-actions .btn-primary {
    box-shadow: 0 6px 20px rgba(239, 68, 68, 0.35);
  }
</style>
