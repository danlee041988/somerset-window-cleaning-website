---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  serviceType = 'default', // window, gutter, solar, conservatory, fascia, commercial
  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;

---

<section class="relative md:-mt-[76px] not-prose overflow-hidden service-hero" {...id ? { id } : {}}>
  <!-- Background with Ken Burns effect -->
  <div class="absolute inset-0 pointer-events-none w-full hero-background" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
    
    <!-- Gradient overlay for better text readability -->
    <div class="absolute inset-0 bg-gradient-to-b from-black/60 via-black/40 to-black/60"></div>
    
  </div>
  
  <!-- Content with parallax effect -->
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 hero-content">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
        {tagline && (
          <p
            class="text-base text-red-400 font-bold tracking-wide uppercase drop-shadow-lg animate-fade-in-up"
            style="animation-delay: 0.1s"
            set:html={tagline}
          />
        )}
        {title && (
          <h1
            class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading text-white drop-shadow-2xl animate-fade-in-up"
            style="animation-delay: 0.2s"
            set:html={title}
          />
        )}
        <div class="max-w-3xl mx-auto">
          {subtitle && (
            <p
              class="text-xl text-white font-semibold mb-6 drop-shadow-lg animate-fade-in-up"
              style="animation-delay: 0.3s"
              set:html={subtitle}
            />
          )}
          {actions && (
            <div class="max-w-xs sm:max-w-sm m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-3 animate-fade-in-up" style="animation-delay: 0.4s">
              {Array.isArray(actions) ? (
                actions.map((action) => (
                  <div class="flex w-full sm:w-auto">
                    <Button {...(action || {})} class="w-full sm:mb-0 hover-lift" />
                  </div>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )}
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>

<style>
  /* Ken Burns effect for hero background */
  @keyframes kenBurns {
    0% {
      transform: scale(1) translateZ(0);
    }
    100% {
      transform: scale(1.1) translateZ(0);
    }
  }
  
  .hero-background :global(img) {
    animation: kenBurns 25s ease-out infinite alternate;
    will-change: transform;
  }
  
  /* Parallax effect on scroll */
  .hero-content {
    transition: transform 0.5s ease-out;
  }
  
  /* Fade in up animation */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in-up {
    opacity: 0;
    animation: fadeInUp 0.8s ease-out forwards;
  }
  
  /* Hover lift effect for buttons */
  .hover-lift {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .hover-lift:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }
  
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .hero-background :global(img),
    .animate-fade-in-up {
      animation: none !important;
    }
    
    .animate-fade-in-up {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Performance optimization for mobile */
  @media (max-width: 768px) {
    /* Reduce Ken Burns effect on mobile for better performance */
    .hero-background :global(img) {
      animation-duration: 35s;
    }
  }
  
  /* Prevent layout shifts */
  .service-hero {
    contain: layout style paint;
  }
  
</style>

<script>
  // Parallax effect on scroll
  document.addEventListener('DOMContentLoaded', () => {
    const heroSections = document.querySelectorAll('.service-hero');
    
    heroSections.forEach(hero => {
      const content = hero.querySelector('.hero-content');
      const background = hero.querySelector('.hero-background');
      
      if (!content || !background) return;
      
      // Throttled scroll handler for performance
      let ticking = false;
      
      function updateParallax() {
        const scrolled = window.pageYOffset;
        const heroRect = hero.getBoundingClientRect();
        const heroTop = heroRect.top + scrolled;
        const heroHeight = heroRect.height;
        
        // Only apply parallax when hero is in viewport
        if (scrolled + window.innerHeight > heroTop && scrolled < heroTop + heroHeight) {
          const parallaxSpeed = 0.3;
          const yPos = -(scrolled - heroTop) * parallaxSpeed;
          
          background.style.transform = `translateY(${yPos}px)`;
        }
        
        ticking = false;
      }
      
      function requestTick() {
        if (!ticking) {
          window.requestAnimationFrame(updateParallax);
          ticking = true;
        }
      }
      
      // Check for reduced motion preference
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      
      if (!prefersReducedMotion) {
        window.addEventListener('scroll', requestTick, { passive: true });
      }
    });
  });
</script>