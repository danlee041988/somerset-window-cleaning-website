---
import Layout from '~/layouts/PageLayout.astro';
import { Icon } from 'astro-icon/components';
import { supabase } from '~/lib/supabase';

const metadata = {
  title: 'Booking Tracker - Somerset Window Cleaning Staff',
  robots: {
    index: false,
    follow: false,
  },
};

// Fetch active bookings from database
let bookings = [];
let stats = {
  new: 0,
  contacted: 0,
  quoted: 0,
  ready: 0,
  todayNew: 0,
};

if (supabase) {
  try {
    // Fetch all active bookings
    const { data, error } = await supabase
      .from('active_bookings')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (!error && data) {
      bookings = data;
      
      // Calculate stats
      const today = new Date().toDateString();
      bookings.forEach(booking => {
        stats[booking.booking_status]++;
        if (new Date(booking.created_at).toDateString() === today) {
          stats.todayNew++;
        }
      });
    }
  } catch (error) {
    console.error('Error fetching bookings:', error);
  }
}

// Group bookings by status
const bookingsByStatus = {
  new: bookings.filter(b => b.booking_status === 'new'),
  contacted: bookings.filter(b => b.booking_status === 'contacted'),
  quoted: bookings.filter(b => b.booking_status === 'quoted'),
  ready: bookings.filter(b => b.booking_status === 'ready'),
};

// Format time ago
function timeAgo(date: string) {
  const now = new Date();
  const then = new Date(date);
  const diff = now.getTime() - then.getTime();
  
  const hours = Math.floor(diff / (1000 * 60 * 60));
  const days = Math.floor(hours / 24);
  
  if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;
  if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
  return 'Just now';
}

// Format phone number for display
function formatPhone(phone: string) {
  return phone.replace(/(\d{5})(\d{6})/, '$1 $2');
}
---

<Layout metadata={metadata}>
  <div class="min-h-screen bg-gray-900">
    <!-- Header -->
    <header class="bg-gray-800 border-b border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <h1 class="text-xl font-semibold text-white">Booking Tracker</h1>
            <span class="ml-4 text-sm text-gray-400">Somerset Window Cleaning Staff Portal</span>
          </div>
          <div class="flex items-center gap-4">
            <button id="refresh-btn" class="text-gray-400 hover:text-white">
              <Icon name="tabler:refresh" class="w-5 h-5" />
            </button>
            <button id="logout-btn" class="text-gray-400 hover:text-white flex items-center gap-2">
              <Icon name="tabler:logout" class="w-5 h-5" />
              <span class="hidden sm:inline">Logout</span>
            </button>
          </div>
        </div>
      </div>
    </header>

    <!-- Stats Bar -->
    <div class="bg-gray-800/50 border-b border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div class="grid grid-cols-2 sm:grid-cols-5 gap-4 text-center">
          <div>
            <p class="text-2xl font-bold text-white">{stats.todayNew}</p>
            <p class="text-sm text-gray-400">New Today</p>
          </div>
          <div>
            <p class="text-2xl font-bold text-red-400">{stats.new}</p>
            <p class="text-sm text-gray-400">Awaiting Contact</p>
          </div>
          <div>
            <p class="text-2xl font-bold text-amber-400">{stats.contacted}</p>
            <p class="text-sm text-gray-400">Contacted</p>
          </div>
          <div>
            <p class="text-2xl font-bold text-blue-400">{stats.quoted}</p>
            <p class="text-sm text-gray-400">Quoted</p>
          </div>
          <div>
            <p class="text-2xl font-bold text-green-400">{stats.ready}</p>
            <p class="text-sm text-gray-400">Ready for Squeegee</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <!-- Search Bar -->
      <div class="mb-6">
        <div class="relative">
          <Icon name="tabler:search" class="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
          <input
            type="text"
            id="search-input"
            placeholder="Search by name, postcode, or phone..."
            class="w-full pl-10 pr-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
          />
        </div>
      </div>

      <!-- Pipeline View -->
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-4 mb-8">
        <!-- New Column -->
        <div class="bg-gray-800 rounded-lg border border-gray-700 p-4">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-lg font-semibold text-white">New</h2>
            <span class="bg-red-600 text-white text-xs font-bold px-2 py-1 rounded">{stats.new}</span>
          </div>
          <div class="space-y-3" id="new-column">
            {bookingsByStatus.new.map(booking => (
              <div class="booking-card bg-gray-700 rounded-lg p-3 border border-gray-600 hover:border-red-500 cursor-pointer transition-all" data-booking-id={booking.id} data-status="new">
                <div class="flex justify-between items-start mb-2">
                  <h3 class="font-semibold text-white">{booking.first_name} {booking.last_name}</h3>
                  <span class="text-xs text-gray-400">{timeAgo(booking.created_at)}</span>
                </div>
                <div class="text-sm text-gray-300 space-y-1">
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:map-pin" class="w-4 h-4" />
                    {booking.postcode}
                  </p>
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:home" class="w-4 h-4" />
                    {booking.property_type || 'Not specified'}
                  </p>
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:phone" class="w-4 h-4" />
                    {formatPhone(booking.phone || '')}
                  </p>
                </div>
                <div class="mt-3 flex gap-2">
                  <button class="status-btn flex-1 bg-amber-600 hover:bg-amber-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id} data-new-status="contacted">
                    Contact
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Contacted Column -->
        <div class="bg-gray-800 rounded-lg border border-gray-700 p-4">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-lg font-semibold text-white">Contacted</h2>
            <span class="bg-amber-600 text-white text-xs font-bold px-2 py-1 rounded">{stats.contacted}</span>
          </div>
          <div class="space-y-3" id="contacted-column">
            {bookingsByStatus.contacted.map(booking => (
              <div class="booking-card bg-gray-700 rounded-lg p-3 border border-gray-600 hover:border-amber-500 cursor-pointer transition-all" data-booking-id={booking.id} data-status="contacted">
                <div class="flex justify-between items-start mb-2">
                  <h3 class="font-semibold text-white">{booking.first_name} {booking.last_name}</h3>
                  <span class="text-xs text-gray-400">{timeAgo(booking.status_updated_at || booking.created_at)}</span>
                </div>
                <div class="text-sm text-gray-300 space-y-1">
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:map-pin" class="w-4 h-4" />
                    {booking.postcode}
                  </p>
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:home" class="w-4 h-4" />
                    {booking.property_type || 'Not specified'}
                  </p>
                </div>
                <div class="mt-3 flex gap-2">
                  <button class="status-btn flex-1 bg-blue-600 hover:bg-blue-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id} data-new-status="quoted">
                    Quote
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Quoted Column -->
        <div class="bg-gray-800 rounded-lg border border-gray-700 p-4">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-lg font-semibold text-white">Quoted</h2>
            <span class="bg-blue-600 text-white text-xs font-bold px-2 py-1 rounded">{stats.quoted}</span>
          </div>
          <div class="space-y-3" id="quoted-column">
            {bookingsByStatus.quoted.map(booking => (
              <div class="booking-card bg-gray-700 rounded-lg p-3 border border-gray-600 hover:border-blue-500 cursor-pointer transition-all" data-booking-id={booking.id} data-status="quoted">
                <div class="flex justify-between items-start mb-2">
                  <h3 class="font-semibold text-white">{booking.first_name} {booking.last_name}</h3>
                  <span class="text-xs text-gray-400">{timeAgo(booking.status_updated_at || booking.created_at)}</span>
                </div>
                <div class="text-sm text-gray-300 space-y-1">
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:map-pin" class="w-4 h-4" />
                    {booking.postcode}
                  </p>
                  {booking.total_price && (
                    <p class="flex items-center gap-1 font-semibold text-green-400">
                      <Icon name="tabler:currency-pound" class="w-4 h-4" />
                      £{booking.total_price}
                    </p>
                  )}
                </div>
                <div class="mt-3 flex gap-2">
                  <button class="status-btn flex-1 bg-green-600 hover:bg-green-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id} data-new-status="ready">
                    Ready
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Ready Column -->
        <div class="bg-gray-800 rounded-lg border border-gray-700 p-4">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-lg font-semibold text-white">Ready for Squeegee</h2>
            <span class="bg-green-600 text-white text-xs font-bold px-2 py-1 rounded">{stats.ready}</span>
          </div>
          <div class="space-y-3" id="ready-column">
            {bookingsByStatus.ready.map(booking => (
              <div class="booking-card bg-gray-700 rounded-lg p-3 border border-gray-600 hover:border-green-500 cursor-pointer transition-all" data-booking-id={booking.id} data-status="ready">
                <div class="flex justify-between items-start mb-2">
                  <h3 class="font-semibold text-white">{booking.first_name} {booking.last_name}</h3>
                  <Icon name="tabler:check" class="w-5 h-5 text-green-400" />
                </div>
                <div class="text-sm text-gray-300 space-y-1">
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:map-pin" class="w-4 h-4" />
                    {booking.postcode}
                  </p>
                  {booking.total_price && (
                    <p class="flex items-center gap-1 font-semibold text-green-400">
                      <Icon name="tabler:currency-pound" class="w-4 h-4" />
                      £{booking.total_price}
                    </p>
                  )}
                </div>
                <div class="mt-3 flex gap-2">
                  <button class="copy-btn flex-1 bg-blue-600 hover:bg-blue-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id}>
                    <Icon name="tabler:copy" class="w-4 h-4 inline mr-1" />
                    Copy
                  </button>
                  <button class="complete-btn flex-1 bg-gray-600 hover:bg-gray-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id}>
                    <Icon name="tabler:archive" class="w-4 h-4 inline mr-1" />
                    Done
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </main>

    <!-- Booking Details Modal (hidden by default) -->
    <div id="booking-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div class="bg-gray-800 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex justify-between items-start mb-4">
            <h2 class="text-xl font-semibold text-white">Booking Details</h2>
            <button id="close-modal" class="text-gray-400 hover:text-white">
              <Icon name="tabler:x" class="w-6 h-6" />
            </button>
          </div>
          <div id="modal-content">
            <!-- Content will be populated by JavaScript -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Initialize functionality
    document.addEventListener('DOMContentLoaded', () => {
      // Logout functionality
      document.getElementById('logout-btn')?.addEventListener('click', async () => {
        await fetch('/api/staff/auth', { method: 'DELETE' });
        window.location.href = '/staff/login';
      });

      // Refresh functionality
      document.getElementById('refresh-btn')?.addEventListener('click', () => {
        window.location.reload();
      });

      // Search functionality
      const searchInput = document.getElementById('search-input') as HTMLInputElement;
      searchInput?.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
        const cards = document.querySelectorAll('.booking-card');
        
        cards.forEach(card => {
          const text = card.textContent?.toLowerCase() || '';
          if (text.includes(searchTerm)) {
            (card as HTMLElement).style.display = 'block';
          } else {
            (card as HTMLElement).style.display = 'none';
          }
        });
      });

      // Status update buttons
      document.querySelectorAll('.status-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          e.stopPropagation();
          const bookingId = (e.target as HTMLElement).dataset.bookingId;
          const newStatus = (e.target as HTMLElement).dataset.newStatus;
          
          if (bookingId && newStatus) {
            await updateBookingStatus(bookingId, newStatus);
          }
        });
      });

      // Copy for Squeegee buttons
      document.querySelectorAll('.copy-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          e.stopPropagation();
          const bookingId = (e.target as HTMLElement).dataset.bookingId;
          if (bookingId) {
            await copyForSqueegee(bookingId);
          }
        });
      });

      // Complete/Archive buttons
      document.querySelectorAll('.complete-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          e.stopPropagation();
          const bookingId = (e.target as HTMLElement).dataset.bookingId;
          if (bookingId && confirm('Mark this booking as completed and remove from view?')) {
            await completeBooking(bookingId);
          }
        });
      });

      // Click on card to view details
      document.querySelectorAll('.booking-card').forEach(card => {
        card.addEventListener('click', (e) => {
          const bookingId = (e.currentTarget as HTMLElement).dataset.bookingId;
          if (bookingId) {
            showBookingDetails(bookingId);
          }
        });
      });

      // Close modal
      document.getElementById('close-modal')?.addEventListener('click', () => {
        document.getElementById('booking-modal')?.classList.add('hidden');
      });
    });

    // Update booking status
    async function updateBookingStatus(bookingId: string, newStatus: string) {
      try {
        const response = await fetch('/api/staff/bookings/status', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bookingId, newStatus }),
        });
        
        if (response.ok) {
          window.location.reload();
        }
      } catch (error) {
        console.error('Error updating status:', error);
      }
    }

    // Copy booking details for Squeegee
    async function copyForSqueegee(bookingId: string) {
      try {
        const response = await fetch(`/api/staff/bookings/${bookingId}`);
        const booking = await response.json();
        
        const text = `${booking.first_name} ${booking.last_name}
${booking.phone}
${booking.property_type || 'Property type not specified'}
${booking.address}, ${booking.postcode}
Services: Window Cleaning${booking.frequency ? ` (${booking.frequency})` : ''}
Price: £${booking.total_price || 'TBD'}
${booking.internal_notes ? `Notes: ${booking.internal_notes}` : ''}`;

        await navigator.clipboard.writeText(text);
        
        // Show success feedback
        const btn = document.querySelector(`[data-booking-id="${bookingId}"].copy-btn`);
        if (btn) {
          const originalText = btn.innerHTML;
          btn.innerHTML = '<svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>Copied!';
          setTimeout(() => {
            btn.innerHTML = originalText;
          }, 2000);
        }
      } catch (error) {
        console.error('Error copying booking:', error);
      }
    }

    // Mark booking as completed
    async function completeBooking(bookingId: string) {
      try {
        const response = await fetch('/api/staff/bookings/complete', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bookingId }),
        });
        
        if (response.ok) {
          window.location.reload();
        }
      } catch (error) {
        console.error('Error completing booking:', error);
      }
    }

    // Show booking details modal
    async function showBookingDetails(bookingId: string) {
      try {
        const response = await fetch(`/api/staff/bookings/${bookingId}`);
        const booking = await response.json();
        
        const modalContent = document.getElementById('modal-content');
        if (modalContent) {
          modalContent.innerHTML = `
            <div class="space-y-4">
              <div class="bg-gray-700 rounded-lg p-4">
                <h3 class="font-semibold text-white mb-2">Customer Information</h3>
                <div class="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <p class="text-gray-400">Name</p>
                    <p class="text-white">${booking.first_name} ${booking.last_name}</p>
                  </div>
                  <div>
                    <p class="text-gray-400">Phone</p>
                    <p class="text-white">${booking.phone || 'Not provided'}</p>
                  </div>
                  <div>
                    <p class="text-gray-400">Email</p>
                    <p class="text-white">${booking.email}</p>
                  </div>
                  <div>
                    <p class="text-gray-400">Postcode</p>
                    <p class="text-white">${booking.postcode}</p>
                  </div>
                </div>
              </div>
              
              <div class="bg-gray-700 rounded-lg p-4">
                <h3 class="font-semibold text-white mb-2">Booking Details</h3>
                <div class="space-y-2 text-sm">
                  <p><span class="text-gray-400">Status:</span> <span class="text-white capitalize">${booking.booking_status}</span></p>
                  <p><span class="text-gray-400">Service:</span> <span class="text-white">${booking.service_name || 'Window Cleaning'}</span></p>
                  <p><span class="text-gray-400">Property:</span> <span class="text-white">${booking.property_type || 'Not specified'}</span></p>
                  <p><span class="text-gray-400">Address:</span> <span class="text-white">${booking.address}</span></p>
                  <p><span class="text-gray-400">Price:</span> <span class="text-white">£${booking.total_price || 'TBD'}</span></p>
                  <p><span class="text-gray-400">Created:</span> <span class="text-white">${new Date(booking.created_at).toLocaleString()}</span></p>
                </div>
              </div>
              
              <div class="bg-gray-700 rounded-lg p-4">
                <h3 class="font-semibold text-white mb-2">Internal Notes</h3>
                <textarea 
                  id="notes-textarea"
                  class="w-full bg-gray-600 text-white rounded p-2 text-sm"
                  rows="4"
                  placeholder="Add notes here..."
                >${booking.internal_notes || ''}</textarea>
                <button 
                  onclick="saveNotes('${bookingId}')"
                  class="mt-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium py-2 px-4 rounded transition-colors"
                >
                  Save Notes
                </button>
              </div>
            </div>
          `;
        }
        
        document.getElementById('booking-modal')?.classList.remove('hidden');
      } catch (error) {
        console.error('Error fetching booking details:', error);
      }
    }

    // Save notes function
    window.saveNotes = async function(bookingId: string) {
      const textarea = document.getElementById('notes-textarea') as HTMLTextAreaElement;
      const notes = textarea.value;
      
      try {
        const response = await fetch('/api/staff/bookings/notes', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bookingId, notes }),
        });
        
        if (response.ok) {
          // Show success feedback
          const btn = event?.target as HTMLButtonElement;
          if (btn) {
            const originalText = btn.textContent;
            btn.textContent = 'Saved!';
            btn.classList.add('bg-green-600');
            setTimeout(() => {
              btn.textContent = originalText || 'Save Notes';
              btn.classList.remove('bg-green-600');
            }, 2000);
          }
        }
      } catch (error) {
        console.error('Error saving notes:', error);
      }
    };
  </script>
</Layout>