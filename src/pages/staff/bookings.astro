---
import StaffLayout from '~/layouts/StaffLayout.astro';
import { Icon } from 'astro-icon/components';
import { supabase } from '~/lib/supabase';

const metadata = {
  title: 'Booking Tracker - Somerset Window Cleaning Staff',
  robots: {
    index: false,
    follow: false,
  },
};

// Fetch active bookings from database with enhanced fields
let bookings = [];
let stats = {
  new: 0,
  contacted: 0,
  quoted: 0,
  ready: 0,
  todayNew: 0,
  totalRevenue: 0,
  pendingRevenue: 0,
  acceptanceRate: 0,
};

if (supabase) {
  try {
    // Fetch all active bookings from bookings_simple table with enhanced fields
    const { data, error } = await supabase
      .from('bookings_simple')
      .select('*')
      .order('priority DESC, created_at DESC');
    
    if (!error && data) {
      bookings = data;
      
      // Calculate enhanced stats
      const today = new Date().toDateString();
      let totalQuoted = 0;
      let totalAccepted = 0;
      
      bookings.forEach(booking => {
        const status = booking.status || 'new';
        const quoteStatus = booking.quote_status || 'pending';
        const quoteAmount = parseFloat(booking.quote_amount || booking.estimated_price || 0);
        
        // Status counts
        if (status === 'new') stats.new++;
        else if (status === 'contacted') stats.contacted++;
        else if (status === 'quoted') stats.quoted++;
        else if (status === 'ready') stats.ready++;
        
        // New bookings today
        if (new Date(booking.created_at).toDateString() === today) {
          stats.todayNew++;
        }
        
        // Revenue calculations
        if (quoteAmount > 0) {
          if (quoteStatus === 'accepted') {
            stats.totalRevenue += quoteAmount;
            totalAccepted++;
          } else {
            stats.pendingRevenue += quoteAmount;
          }
          
          if (status === 'quoted' || quoteStatus !== 'pending') {
            totalQuoted++;
          }
        }
      });
      
      // Calculate acceptance rate
      stats.acceptanceRate = totalQuoted > 0 ? Math.round((totalAccepted / totalQuoted) * 100) : 0;
    }
  } catch (error) {
    console.error('Error fetching bookings:', error);
  }
}

// Group bookings by status - map bookings_simple fields
const bookingsByStatus = {
  new: bookings.filter(b => (b.status || 'new') === 'new'),
  contacted: bookings.filter(b => (b.status || 'new') === 'contacted'),
  quoted: bookings.filter(b => (b.status || 'new') === 'quoted'),
  ready: bookings.filter(b => (b.status || 'new') === 'ready'),
};

// Format time ago
function timeAgo(date: string) {
  const now = new Date();
  const then = new Date(date);
  const diff = now.getTime() - then.getTime();
  
  const hours = Math.floor(diff / (1000 * 60 * 60));
  const days = Math.floor(hours / 24);
  
  if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;
  if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
  return 'Just now';
}

// Format phone number for display
function formatPhone(phone: string) {
  return phone.replace(/(\d{5})(\d{6})/, '$1 $2');
}
---

<StaffLayout metadata={metadata}>
  <div class="min-h-screen bg-gray-900">
    <!-- Header -->
    <header class="bg-gray-800 border-b border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <h1 class="text-xl font-semibold text-white">Booking Tracker</h1>
            <span class="ml-4 text-sm text-gray-400">Somerset Window Cleaning Staff Portal</span>
          </div>
          <div class="flex items-center gap-4">
            <button id="refresh-btn" class="text-gray-400 hover:text-white">
              <Icon name="tabler:refresh" class="w-5 h-5" />
            </button>
            <button id="logout-btn" class="text-gray-400 hover:text-white flex items-center gap-2">
              <Icon name="tabler:logout" class="w-5 h-5" />
              <span class="hidden sm:inline">Logout</span>
            </button>
          </div>
        </div>
      </div>
    </header>

    <!-- Enhanced Stats Bar -->
    <div class="bg-gray-800/50 border-b border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <!-- Primary Stats Row -->
        <div class="grid grid-cols-2 sm:grid-cols-5 gap-4 text-center mb-4">
          <div>
            <p class="text-2xl font-bold text-white">{stats.todayNew}</p>
            <p class="text-sm text-gray-400">New Today</p>
          </div>
          <div>
            <p class="text-2xl font-bold text-red-400">{stats.new}</p>
            <p class="text-sm text-gray-400">Awaiting Contact</p>
          </div>
          <div>
            <p class="text-2xl font-bold text-amber-400">{stats.contacted}</p>
            <p class="text-sm text-gray-400">Contacted</p>
          </div>
          <div>
            <p class="text-2xl font-bold text-blue-400">{stats.quoted}</p>
            <p class="text-sm text-gray-400">Quoted</p>
          </div>
          <div>
            <p class="text-2xl font-bold text-green-400">{stats.ready}</p>
            <p class="text-sm text-gray-400">Ready for Squeegee</p>
          </div>
        </div>
        
        <!-- Revenue Stats Row -->
        <div class="grid grid-cols-3 gap-6 text-center pt-4 border-t border-gray-700">
          <div>
            <p class="text-xl font-bold text-green-400">£{stats.totalRevenue.toFixed(2)}</p>
            <p class="text-xs text-gray-400">Confirmed Revenue</p>
          </div>
          <div>
            <p class="text-xl font-bold text-yellow-400">£{stats.pendingRevenue.toFixed(2)}</p>
            <p class="text-xs text-gray-400">Pending Revenue</p>
          </div>
          <div>
            <p class="text-xl font-bold text-purple-400">{stats.acceptanceRate}%</p>
            <p class="text-xs text-gray-400">Quote Acceptance Rate</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Action Bar -->
    <div class="bg-gray-800 border-b border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3">
        <div class="flex justify-between items-center">
          <h2 class="text-lg font-medium text-white">Customer Bookings</h2>
          <button 
            id="new-customer-btn" 
            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
          >
            <Icon name="tabler:plus" class="w-5 h-5" />
            New Customer
          </button>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <!-- Search Bar -->
      <div class="mb-6">
        <div class="relative">
          <Icon name="tabler:search" class="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
          <input
            type="text"
            id="search-input"
            placeholder="Search by name, postcode, or phone..."
            class="w-full pl-10 pr-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
          />
        </div>
      </div>

      <!-- Enhanced Drag & Drop Pipeline View -->
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-4 mb-8" id="kanban-board">
        <!-- New Column -->
        <div class="kanban-column bg-gray-800 rounded-lg border border-gray-700 p-4 min-h-96" data-status="new">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-lg font-semibold text-white">New</h2>
            <span class="bg-red-600 text-white text-xs font-bold px-2 py-1 rounded">{stats.new}</span>
          </div>
          <div class="space-y-3 kanban-column-content" id="new-column">
            {bookingsByStatus.new.map(booking => (
              <div class="booking-card bg-gray-700 rounded-lg p-3 border border-gray-600 hover:border-red-500 cursor-move transition-all shadow-sm" 
                   draggable="true" 
                   data-booking-id={booking.id} 
                   data-status="new"
                   data-priority={booking.priority || 'normal'}>
                <!-- Priority Indicator -->
                {booking.priority && booking.priority !== 'normal' && (
                  <div class={`absolute top-2 right-2 w-3 h-3 rounded-full ${
                    booking.priority === 'urgent' ? 'bg-red-500' :
                    booking.priority === 'high' ? 'bg-orange-500' : 'bg-blue-500'
                  }`} title={`${booking.priority} priority`}></div>
                )}
                
                <div class="flex justify-between items-start mb-2">
                  <h3 class="font-semibold text-white">{booking.full_name}</h3>
                  <span class="text-xs text-gray-400">{timeAgo(booking.created_at)}</span>
                </div>
                
                <div class="text-sm text-gray-300 space-y-1">
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:map-pin" class="w-4 h-4" />
                    {booking.postcode}
                  </p>
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:home" class="w-4 h-4" />
                    {booking.property_type || 'Not specified'}
                  </p>
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:phone" class="w-4 h-4" />
                    {formatPhone(booking.phone || '')}
                  </p>
                  
                  <!-- Quote Information -->
                  {booking.quote_amount && (
                    <p class="flex items-center gap-1 font-semibold text-green-400">
                      <Icon name="tabler:currency-pound" class="w-4 h-4" />
                      £{parseFloat(booking.quote_amount).toFixed(2)}
                      <span class={`text-xs px-1 rounded ${
                        booking.quote_status === 'accepted' ? 'bg-green-700 text-green-200' :
                        booking.quote_status === 'rejected' ? 'bg-red-700 text-red-200' :
                        booking.quote_status === 'negotiating' ? 'bg-yellow-700 text-yellow-200' :
                        'bg-gray-700 text-gray-300'
                      }`}>
                        {booking.quote_status || 'pending'}
                      </span>
                    </p>
                  )}
                </div>
                
                <div class="mt-3 flex gap-2">
                  <button class="status-btn flex-1 bg-amber-600 hover:bg-amber-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id} data-new-status="contacted">
                    Contact
                  </button>
                  {booking.priority !== 'urgent' && (
                    <button class="priority-btn bg-red-600 hover:bg-red-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id} data-new-priority="urgent" title="Mark as urgent">
                      <Icon name="tabler:alert-triangle" class="w-3 h-3" />
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Contacted Column -->
        <div class="kanban-column bg-gray-800 rounded-lg border border-gray-700 p-4 min-h-96" data-status="contacted">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-lg font-semibold text-white">Contacted</h2>
            <span class="bg-amber-600 text-white text-xs font-bold px-2 py-1 rounded">{stats.contacted}</span>
          </div>
          <div class="space-y-3 kanban-column-content" id="contacted-column">
            {bookingsByStatus.contacted.map(booking => (
              <div class="booking-card bg-gray-700 rounded-lg p-3 border border-gray-600 hover:border-amber-500 cursor-move transition-all shadow-sm" 
                   draggable="true" 
                   data-booking-id={booking.id} 
                   data-status="contacted"
                   data-priority={booking.priority || 'normal'}>
                <!-- Priority Indicator -->
                {booking.priority && booking.priority !== 'normal' && (
                  <div class={`absolute top-2 right-2 w-3 h-3 rounded-full ${
                    booking.priority === 'urgent' ? 'bg-red-500' :
                    booking.priority === 'high' ? 'bg-orange-500' : 'bg-blue-500'
                  }`} title={`${booking.priority} priority`}></div>
                )}
                
                <div class="flex justify-between items-start mb-2">
                  <h3 class="font-semibold text-white">{booking.full_name}</h3>
                  <span class="text-xs text-gray-400">{timeAgo(booking.status_updated_at || booking.created_at)}</span>
                </div>
                
                <div class="text-sm text-gray-300 space-y-1">
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:map-pin" class="w-4 h-4" />
                    {booking.postcode}
                  </p>
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:home" class="w-4 h-4" />
                    {booking.property_type || 'Not specified'}
                  </p>
                  
                  <!-- Phone with click-to-call -->
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:phone" class="w-4 h-4" />
                    <a href={`tel:${booking.phone}`} class="hover:text-amber-400 transition-colors">
                      {formatPhone(booking.phone || '')}
                    </a>
                  </p>
                  
                  <!-- Follow-up Date -->
                  {booking.follow_up_date && (
                    <p class="flex items-center gap-1 text-yellow-400">
                      <Icon name="tabler:clock" class="w-4 h-4" />
                      Follow-up: {new Date(booking.follow_up_date).toLocaleDateString()}
                    </p>
                  )}
                </div>
                
                <div class="mt-3 flex gap-2">
                  <button class="quote-btn flex-1 bg-blue-600 hover:bg-blue-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id}>
                    <Icon name="tabler:currency-pound" class="w-3 h-3 inline mr-1" />
                    Quote
                  </button>
                  <button class="follow-up-btn bg-gray-600 hover:bg-gray-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id} title="Schedule follow-up">
                    <Icon name="tabler:calendar-plus" class="w-3 h-3" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Quoted Column -->
        <div class="kanban-column bg-gray-800 rounded-lg border border-gray-700 p-4 min-h-96" data-status="quoted">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-lg font-semibold text-white">Quoted</h2>
            <span class="bg-blue-600 text-white text-xs font-bold px-2 py-1 rounded">{stats.quoted}</span>
          </div>
          <div class="space-y-3 kanban-column-content" id="quoted-column">
            {bookingsByStatus.quoted.map(booking => (
              <div class="booking-card bg-gray-700 rounded-lg p-3 border border-gray-600 hover:border-blue-500 cursor-move transition-all shadow-sm" 
                   draggable="true" 
                   data-booking-id={booking.id} 
                   data-status="quoted"
                   data-priority={booking.priority || 'normal'}>
                <!-- Priority Indicator -->
                {booking.priority && booking.priority !== 'normal' && (
                  <div class={`absolute top-2 right-2 w-3 h-3 rounded-full ${
                    booking.priority === 'urgent' ? 'bg-red-500' :
                    booking.priority === 'high' ? 'bg-orange-500' : 'bg-blue-500'
                  }`} title={`${booking.priority} priority`}></div>
                )}
                
                <div class="flex justify-between items-start mb-2">
                  <h3 class="font-semibold text-white">{booking.full_name}</h3>
                  <span class="text-xs text-gray-400">{timeAgo(booking.status_updated_at || booking.created_at)}</span>
                </div>
                
                <div class="text-sm text-gray-300 space-y-1">
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:map-pin" class="w-4 h-4" />
                    {booking.postcode}
                  </p>
                  
                  <!-- Enhanced Quote Display with Inline Editing -->
                  <div class="quote-section bg-gray-600 rounded p-2 mb-2">
                    <div class="flex items-center justify-between">
                      <div class="flex items-center gap-1">
                        <Icon name="tabler:currency-pound" class="w-4 h-4" />
                        <input type="number" 
                               class="quote-input bg-transparent text-green-400 font-semibold text-sm w-16 border-none focus:outline-none focus:ring-1 focus:ring-green-400" 
                               value={parseFloat(booking.quote_amount || booking.estimated_price || 0).toFixed(2)} 
                               data-booking-id={booking.id}
                               min="0" 
                               step="0.01" />
                      </div>
                      
                      <div class={`quote-status text-xs px-2 py-1 rounded font-medium ${
                        booking.quote_status === 'accepted' ? 'bg-green-700 text-green-200' :
                        booking.quote_status === 'rejected' ? 'bg-red-700 text-red-200' :
                        booking.quote_status === 'negotiating' ? 'bg-yellow-700 text-yellow-200' :
                        'bg-gray-700 text-gray-300'
                      }`}>
                        {booking.quote_status || 'pending'}
                      </div>
                    </div>
                    
                    {booking.quote_date && (
                      <p class="text-xs text-gray-400 mt-1">
                        Quoted: {new Date(booking.quote_date).toLocaleDateString()}
                      </p>
                    )}
                  </div>
                  
                  <!-- Quote Action Buttons -->
                  <div class="quote-actions grid grid-cols-3 gap-1 text-xs">
                    <button class="quote-status-btn bg-green-600 hover:bg-green-700 text-white py-1 px-1 rounded transition-colors" 
                            data-booking-id={booking.id} 
                            data-quote-status="accepted" 
                            title="Mark as accepted">
                      <Icon name="tabler:check" class="w-3 h-3" />
                    </button>
                    <button class="quote-status-btn bg-yellow-600 hover:bg-yellow-700 text-white py-1 px-1 rounded transition-colors" 
                            data-booking-id={booking.id} 
                            data-quote-status="negotiating" 
                            title="Mark as negotiating">
                      <Icon name="tabler:message-circle" class="w-3 h-3" />
                    </button>
                    <button class="quote-status-btn bg-red-600 hover:bg-red-700 text-white py-1 px-1 rounded transition-colors" 
                            data-booking-id={booking.id} 
                            data-quote-status="rejected" 
                            title="Mark as rejected">
                      <Icon name="tabler:x" class="w-3 h-3" />
                    </button>
                  </div>
                </div>
                
                <div class="mt-3 flex gap-2">
                  {booking.quote_status === 'accepted' && (
                    <button class="status-btn flex-1 bg-green-600 hover:bg-green-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id} data-new-status="ready">
                      <Icon name="tabler:calendar-check" class="w-3 h-3 inline mr-1" />
                      Schedule
                    </button>
                  )}
                  
                  {booking.quote_status !== 'accepted' && (
                    <button class="follow-up-btn flex-1 bg-amber-600 hover:bg-amber-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id}>
                      <Icon name="tabler:phone-call" class="w-3 h-3 inline mr-1" />
                      Follow-up
                    </button>
                  )}
                  
                  <button class="copy-quote-btn bg-blue-600 hover:bg-blue-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id} title="Copy quote details">
                    <Icon name="tabler:copy" class="w-3 h-3" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Ready Column -->
        <div class="kanban-column bg-gray-800 rounded-lg border border-gray-700 p-4 min-h-96" data-status="ready">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-lg font-semibold text-white">Ready for Squeegee</h2>
            <span class="bg-green-600 text-white text-xs font-bold px-2 py-1 rounded">{stats.ready}</span>
          </div>
          <div class="space-y-3 kanban-column-content" id="ready-column">
            {bookingsByStatus.ready.map(booking => (
              <div class="booking-card bg-gray-700 rounded-lg p-3 border border-gray-600 hover:border-green-500 cursor-move transition-all shadow-sm" 
                   draggable="true" 
                   data-booking-id={booking.id} 
                   data-status="ready"
                   data-priority={booking.priority || 'normal'}>
                <!-- Priority & Completion Status -->
                <div class="flex justify-between items-start mb-2">
                  <h3 class="font-semibold text-white">{booking.full_name}</h3>
                  <div class="flex items-center gap-1">
                    {booking.first_clean_completed && (
                      <Icon name="tabler:check-circle" class="w-4 h-4 text-green-400" title="First clean completed" />
                    )}
                    <Icon name="tabler:check" class="w-4 h-4 text-green-400" />
                  </div>
                </div>
                
                <div class="text-sm text-gray-300 space-y-1">
                  <p class="flex items-center gap-1">
                    <Icon name="tabler:map-pin" class="w-4 h-4" />
                    {booking.postcode}
                  </p>
                  
                  <!-- Service Information -->
                  {booking.service_frequency && (
                    <p class="flex items-center gap-1 text-blue-400">
                      <Icon name="tabler:calendar-repeat" class="w-4 h-4" />
                      {booking.service_frequency}
                    </p>
                  )}
                  
                  <!-- Quote Amount and Status -->
                  {booking.quote_amount && (
                    <p class="flex items-center gap-1 font-semibold text-green-400">
                      <Icon name="tabler:currency-pound" class="w-4 h-4" />
                      £{parseFloat(booking.quote_amount).toFixed(2)}
                      {booking.quote_status === 'accepted' && (
                        <Icon name="tabler:check" class="w-3 h-3 text-green-300" title="Quote accepted" />
                      )}
                    </p>
                  )}
                  
                  <!-- Next Service Date -->
                  {booking.next_service_date && (
                    <p class="flex items-center gap-1 text-purple-400">
                      <Icon name="tabler:calendar-plus" class="w-4 h-4" />
                      Next: {new Date(booking.next_service_date).toLocaleDateString()}
                    </p>
                  )}
                  
                  <!-- Customer Satisfaction -->
                  {booking.customer_satisfaction_score && (
                    <div class="flex items-center gap-1">
                      <Icon name="tabler:star" class="w-4 h-4 text-yellow-400" />
                      <div class="flex">
                        {Array.from({length: 5}, (_, i) => (
                          <Icon name={i < booking.customer_satisfaction_score ? "tabler:star-filled" : "tabler:star"} 
                                class={`w-3 h-3 ${i < booking.customer_satisfaction_score ? 'text-yellow-400' : 'text-gray-500'}`} />
                        ))}
                      </div>
                    </div>
                  )}
                </div>
                
                <div class="mt-3 space-y-2">
                  <!-- Main Actions -->
                  <div class="flex gap-2">
                    <button class="copy-btn flex-1 bg-blue-600 hover:bg-blue-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id} title="Copy for Squeegee">
                      <Icon name="tabler:copy" class="w-3 h-3 inline mr-1" />
                      Copy
                    </button>
                    
                    {!booking.first_clean_completed && (
                      <button class="complete-first-btn flex-1 bg-green-600 hover:bg-green-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id} title="Mark first clean as completed">
                        <Icon name="tabler:check-circle" class="w-3 h-3 inline mr-1" />
                        Complete
                      </button>
                    )}
                    
                    {booking.first_clean_completed && (
                      <button class="archive-btn flex-1 bg-gray-600 hover:bg-gray-700 text-white text-xs font-medium py-1 px-2 rounded transition-colors" data-booking-id={booking.id} title="Archive completed booking">
                        <Icon name="tabler:archive" class="w-3 h-3 inline mr-1" />
                        Archive
                      </button>
                    )}
                  </div>
                  
                  <!-- Secondary Actions -->
                  <div class="flex gap-1 text-xs">
                    {!booking.customer_satisfaction_score && booking.first_clean_completed && (
                      <button class="feedback-btn flex-1 bg-yellow-600 hover:bg-yellow-700 text-white py-1 px-2 rounded transition-colors" data-booking-id={booking.id} title="Request customer feedback">
                        <Icon name="tabler:message-star" class="w-3 h-3 inline mr-1" />
                        Feedback
                      </button>
                    )}
                    
                    {booking.service_frequency && booking.service_frequency !== 'adhoc' && (
                      <button class="schedule-next-btn flex-1 bg-purple-600 hover:bg-purple-700 text-white py-1 px-2 rounded transition-colors" data-booking-id={booking.id} title="Schedule next service">
                        <Icon name="tabler:calendar-plus" class="w-3 h-3 inline mr-1" />
                        Next
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </main>

    <!-- Booking Details Modal (hidden by default) -->
    <div id="booking-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div class="bg-gray-800 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex justify-between items-start mb-4">
            <h2 class="text-xl font-semibold text-white">Booking Details</h2>
            <button id="close-modal" class="text-gray-400 hover:text-white">
              <Icon name="tabler:x" class="w-6 h-6" />
            </button>
          </div>
          <div id="modal-content">
            <!-- Content will be populated by JavaScript -->
          </div>
        </div>
      </div>
    </div>

    <!-- New Customer Modal -->
    <div id="new-customer-modal" class="hidden fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div class="bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        <!-- Modal Header -->
        <div class="flex justify-between items-center p-6 border-b border-gray-700">
          <h2 class="text-xl font-semibold text-white">Add New Customer</h2>
          <button id="close-modal-btn" class="text-gray-400 hover:text-white">
            <Icon name="tabler:x" class="w-6 h-6" />
          </button>
        </div>
        
        <!-- Modal Body -->
        <form id="new-customer-form" class="p-6 space-y-6">
          <!-- Customer Information -->
          <div>
            <h3 class="text-lg font-medium text-white mb-4">Customer Information</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="customer-name" class="block text-sm font-medium text-gray-300 mb-1">
                  Full Name <span class="text-red-400">*</span>
                </label>
                <input type="text" id="customer-name" name="full_name" required
                       class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="John Smith">
              </div>
              <div>
                <label for="customer-email" class="block text-sm font-medium text-gray-300 mb-1">
                  Email <span class="text-xs text-gray-400">(required if no phone)</span>
                </label>
                <input type="email" id="customer-email" name="email"
                       class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="john.smith@email.com">
              </div>
              <div>
                <label for="customer-phone" class="block text-sm font-medium text-gray-300 mb-1">
                  Phone <span class="text-xs text-gray-400">(required if no email)</span>
                </label>
                <input type="tel" id="customer-phone" name="phone"
                       class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="07123 456789">
              </div>
              <div>
                <label for="contact-method" class="block text-sm font-medium text-gray-300 mb-1">
                  Preferred Contact Method <span class="text-red-400">*</span>
                </label>
                <select id="contact-method" name="contact_method" required
                        class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                  <option value="">Select contact method</option>
                  <option value="phone">Phone</option>
                  <option value="email">Email</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Property Information -->
          <div>
            <h3 class="text-lg font-medium text-white mb-4">Property Information</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="md:col-span-2">
                <label for="customer-address" class="block text-sm font-medium text-gray-300 mb-1">
                  Address <span class="text-red-400">*</span>
                </label>
                <input type="text" id="customer-address" name="address" required
                       class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="123 High Street">
              </div>
              <div>
                <label for="customer-city" class="block text-sm font-medium text-gray-300 mb-1">
                  City <span class="text-red-400">*</span>
                </label>
                <input type="text" id="customer-city" name="city" required
                       class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="Street">
              </div>
              <div>
                <label for="customer-postcode" class="block text-sm font-medium text-gray-300 mb-1">
                  Postcode <span class="text-red-400">*</span>
                </label>
                <input type="text" id="customer-postcode" name="postcode" required
                       class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="BA16 0HW">
              </div>
              <div>
                <label for="property-type" class="block text-sm font-medium text-gray-300 mb-1">
                  Property Type <span class="text-red-400">*</span>
                </label>
                <select id="property-type" name="property_type" required
                        class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                  <option value="">Select Property Type</option>
                  <option value="Flat / Apartment">Flat / Apartment</option>
                  <option value="Terraced House">Terraced House</option>
                  <option value="Semi-Detached House">Semi-Detached House</option>
                  <option value="Detached House">Detached House</option>
                  <option value="Bungalow">Bungalow</option>
                  <option value="Commercial">Commercial Property</option>
                  <option value="Other">Other</option>
                </select>
              </div>
              <div>
                <label for="service-frequency" class="block text-sm font-medium text-gray-300 mb-1">
                  Service Frequency
                </label>
                <select id="service-frequency" name="frequency"
                        class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                  <option value="4weekly">Every 4 weeks</option>
                  <option value="8weekly">Every 8 weeks</option>
                  <option value="12weekly">Every 12 weeks</option>
                  <option value="adhoc">One-off / Ad hoc</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Service Details -->
          <div>
            <h3 class="text-lg font-medium text-white mb-4">Service Details</h3>
            
            <!-- Window Cleaning Option -->
            <div class="mb-4">
              <label class="flex items-center text-gray-300">
                <input type="checkbox" id="window-cleaning" name="window_cleaning" checked
                       class="mr-2 rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500">
                <span class="text-sm font-medium">Window Cleaning (Base Service)</span>
              </label>
            </div>
            
            <!-- Services Grid -->
            <div class="mb-4">
              <label class="block text-sm font-medium text-gray-300 mb-2">
                Additional Services (or select as standalone)
              </label>
              <div class="space-y-3">
                <div class="bg-gray-800 p-3 rounded-lg">
                  <div class="flex items-center justify-between">
                    <label class="flex items-center text-gray-300">
                      <input type="checkbox" name="additional_services" value="gutter" id="gutter-service"
                             class="service-checkbox mr-2 rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500">
                      <span>Gutter Cleaning</span>
                    </label>
                    <div class="flex items-center gap-2">
                      <span class="text-sm text-gray-400">£</span>
                      <input type="number" name="gutter_price" id="gutter-price" value="45" min="0" step="0.01"
                             class="service-price w-16 bg-gray-700 border border-gray-600 rounded px-1 py-1 text-sm text-white">
                      <select name="gutter_frequency" class="bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm text-white">
                        <option value="adhoc">Ad hoc</option>
                        <option value="4weekly">4 weekly</option>
                        <option value="8weekly">8 weekly</option>
                        <option value="12weekly">12 weekly</option>
                      </select>
                    </div>
                  </div>
                </div>
                
                <div class="bg-gray-800 p-3 rounded-lg">
                  <div class="flex items-center justify-between">
                    <label class="flex items-center text-gray-300">
                      <input type="checkbox" name="additional_services" value="conservatory" id="conservatory-service"
                             class="service-checkbox mr-2 rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500">
                      <span>Conservatory</span>
                    </label>
                    <div class="flex items-center gap-2">
                      <span class="text-sm text-gray-400">£</span>
                      <input type="number" name="conservatory_price" id="conservatory-price" value="35" min="0" step="0.01"
                             class="service-price w-16 bg-gray-700 border border-gray-600 rounded px-1 py-1 text-sm text-white">
                      <select name="conservatory_frequency" class="bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm text-white">
                        <option value="adhoc">Ad hoc</option>
                        <option value="4weekly">4 weekly</option>
                        <option value="8weekly">8 weekly</option>
                        <option value="12weekly">12 weekly</option>
                      </select>
                    </div>
                  </div>
                </div>
                
                <div class="bg-gray-800 p-3 rounded-lg">
                  <div class="flex items-center justify-between">
                    <label class="flex items-center text-gray-300">
                      <input type="checkbox" name="additional_services" value="fascia" id="fascia-service"
                             class="service-checkbox mr-2 rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500">
                      <span>Fascia & Soffit</span>
                    </label>
                    <div class="flex items-center gap-2">
                      <span class="text-sm text-gray-400">£</span>
                      <input type="number" name="fascia_price" id="fascia-price" value="65" min="0" step="0.01"
                             class="service-price w-16 bg-gray-700 border border-gray-600 rounded px-1 py-1 text-sm text-white">
                      <select name="fascia_frequency" class="bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm text-white">
                        <option value="adhoc">Ad hoc</option>
                        <option value="yearly">Yearly</option>
                      </select>
                    </div>
                  </div>
                </div>
                
                <div class="bg-gray-800 p-3 rounded-lg">
                  <div class="flex items-center justify-between">
                    <label class="flex items-center text-gray-300">
                      <input type="checkbox" name="additional_services" value="pressure_wash" id="pressure-service"
                             class="service-checkbox mr-2 rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500">
                      <span>Pressure Washing</span>
                    </label>
                    <div class="flex items-center gap-2">
                      <span class="text-sm text-gray-400">£</span>
                      <input type="number" name="pressure_wash_price" id="pressure-price" value="85" min="0" step="0.01"
                             class="service-price w-16 bg-gray-700 border border-gray-600 rounded px-1 py-1 text-sm text-white">
                      <select name="pressure_frequency" class="bg-gray-700 border border-gray-600 rounded px-2 py-1 text-sm text-white">
                        <option value="adhoc">Ad hoc</option>
                        <option value="yearly">Yearly</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Total Price Display -->
            <div class="bg-blue-900/30 border border-blue-700 rounded-lg p-4 mb-4">
              <div class="flex justify-between items-center">
                <span class="text-white font-medium">Estimated Total Price:</span>
                <span class="text-2xl font-bold text-blue-400">£<span id="total-price">0.00</span></span>
              </div>
            </div>
            
            <!-- Manual Price Override -->
            <div class="mb-4">
              <label for="estimated-price" class="block text-sm font-medium text-gray-300 mb-1">
                Manual Price Override (£) <span class="text-xs text-gray-400">- leave blank to use calculated total</span>
              </label>
              <input type="number" id="estimated-price" name="estimated_price" min="0" step="0.01"
                     class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                     placeholder="Leave blank for auto calculation">
            </div>
            
            <div class="mt-4">
              <label for="customer-notes" class="block text-sm font-medium text-gray-300 mb-1">
                Notes / Special Instructions
              </label>
              <textarea id="customer-notes" name="notes" rows="3"
                        class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Any special instructions or notes about the customer or property..."></textarea>
            </div>
          </div>

          <!-- Modal Footer -->
          <div class="flex justify-end gap-3 pt-6 border-t border-gray-700">
            <button type="button" id="cancel-btn" 
                    class="px-4 py-2 text-gray-400 hover:text-white transition-colors">
              Cancel
            </button>
            <button type="submit" id="save-customer-btn"
                    class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors">
              Add Customer
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Enhanced Kanban Board with Drag & Drop Functionality
    let draggedElement: HTMLElement | null = null;
    let draggedFromColumn: string | null = null;

    document.addEventListener('DOMContentLoaded', () => {
      initializeKanbanBoard();
      initializeEventListeners();
    });

    function initializeKanbanBoard() {
      // Initialize drag and drop for booking cards
      document.querySelectorAll('.booking-card').forEach(card => {
        initializeBookingCard(card as HTMLElement);
      });

      // Initialize drop zones
      document.querySelectorAll('.kanban-column').forEach(column => {
        initializeDropZone(column as HTMLElement);
      });
    }

    function initializeBookingCard(card: HTMLElement) {
      // Drag events
      card.addEventListener('dragstart', handleDragStart);
      card.addEventListener('dragend', handleDragEnd);
      
      // Click event for details (only if not dragging)
      let isDragging = false;
      card.addEventListener('mousedown', () => { isDragging = false; });
      card.addEventListener('mousemove', () => { isDragging = true; });
      card.addEventListener('click', (e) => {
        e.stopPropagation();
        if (!isDragging) {
          const bookingId = card.dataset.bookingId;
          if (bookingId) {
            showBookingDetails(bookingId);
          }
        }
      });
    }

    function initializeDropZone(column: HTMLElement) {
      column.addEventListener('dragover', handleDragOver);
      column.addEventListener('drop', handleDrop);
      column.addEventListener('dragenter', handleDragEnter);
      column.addEventListener('dragleave', handleDragLeave);
    }

    function initializeEventListeners() {
      // Logout functionality
      document.getElementById('logout-btn')?.addEventListener('click', async () => {
        await fetch('/api/staff/auth', { method: 'DELETE' });
        window.location.href = '/staff/login';
      });

      // Refresh functionality
      document.getElementById('refresh-btn')?.addEventListener('click', () => {
        window.location.reload();
      });

      // Enhanced search functionality
      const searchInput = document.getElementById('search-input') as HTMLInputElement;
      searchInput?.addEventListener('input', debounce(handleSearch, 300));

      // Quote input changes
      document.querySelectorAll('.quote-input').forEach(input => {
        input.addEventListener('change', handleQuoteAmountChange);
        input.addEventListener('blur', handleQuoteAmountChange);
      });

      // Quote status buttons
      document.querySelectorAll('.quote-status-btn').forEach(btn => {
        btn.addEventListener('click', handleQuoteStatusChange);
      });

      // Priority buttons
      document.querySelectorAll('.priority-btn').forEach(btn => {
        btn.addEventListener('click', handlePriorityChange);
      });

      // Follow-up buttons
      document.querySelectorAll('.follow-up-btn').forEach(btn => {
        btn.addEventListener('click', handleFollowUpSchedule);
      });

      // Quote action buttons
      document.querySelectorAll('.quote-btn').forEach(btn => {
        btn.addEventListener('click', handleQuoteAction);
      });

      // Copy buttons
      document.querySelectorAll('.copy-btn, .copy-quote-btn').forEach(btn => {
        btn.addEventListener('click', handleCopyAction);
      });

      // Complete first clean buttons
      document.querySelectorAll('.complete-first-btn').forEach(btn => {
        btn.addEventListener('click', handleCompleteFirstClean);
      });

      // Archive buttons
      document.querySelectorAll('.archive-btn').forEach(btn => {
        btn.addEventListener('click', handleArchiveBooking);
      });

      // Feedback buttons
      document.querySelectorAll('.feedback-btn').forEach(btn => {
        btn.addEventListener('click', handleRequestFeedback);
      });

      // Schedule next service buttons
      document.querySelectorAll('.schedule-next-btn').forEach(btn => {
        btn.addEventListener('click', handleScheduleNextService);
      });

      // Legacy status buttons
      document.querySelectorAll('.status-btn').forEach(btn => {
        btn.addEventListener('click', handleStatusUpdate);
      });

      // Close modal
      document.getElementById('close-modal')?.addEventListener('click', () => {
        document.getElementById('booking-modal')?.classList.add('hidden');
      });

      // Keyboard shortcuts
      document.addEventListener('keydown', handleKeyboardShortcuts);
    }

    // =============================================================================
    // DRAG AND DROP HANDLERS
    // =============================================================================

    function handleDragStart(e: DragEvent) {
      draggedElement = e.target as HTMLElement;
      draggedFromColumn = draggedElement.dataset.status || null;
      
      draggedElement.style.opacity = '0.5';
      e.dataTransfer?.setData('text/html', draggedElement.outerHTML);
      
      // Add visual feedback to valid drop zones
      document.querySelectorAll('.kanban-column').forEach(column => {
        if (column !== draggedElement?.closest('.kanban-column')) {
          column.classList.add('drag-over-possible');
        }
      });
    }

    function handleDragEnd(e: DragEvent) {
      if (draggedElement) {
        draggedElement.style.opacity = '1';
      }
      
      // Remove visual feedback
      document.querySelectorAll('.kanban-column').forEach(column => {
        column.classList.remove('drag-over-possible', 'drag-over-active');
      });
      
      draggedElement = null;
      draggedFromColumn = null;
    }

    function handleDragOver(e: DragEvent) {
      e.preventDefault();
      e.dataTransfer!.dropEffect = 'move';
    }

    function handleDragEnter(e: DragEvent) {
      e.preventDefault();
      const column = (e.target as HTMLElement).closest('.kanban-column');
      if (column && column !== draggedElement?.closest('.kanban-column')) {
        column.classList.add('drag-over-active');
      }
    }

    function handleDragLeave(e: DragEvent) {
      const column = (e.target as HTMLElement).closest('.kanban-column');
      if (column) {
        column.classList.remove('drag-over-active');
      }
    }

    async function handleDrop(e: DragEvent) {
      e.preventDefault();
      
      if (!draggedElement) return;
      
      const dropColumn = (e.target as HTMLElement).closest('.kanban-column') as HTMLElement;
      if (!dropColumn || dropColumn === draggedElement.closest('.kanban-column')) return;
      
      const newStatus = dropColumn.dataset.status;
      const bookingId = draggedElement.dataset.bookingId;
      
      if (!newStatus || !bookingId) return;
      
      // Show loading state
      draggedElement.style.opacity = '0.7';
      
      try {
        // Update status in database
        const success = await updateBookingStatus(bookingId, newStatus);
        
        if (success) {
          // Move element to new column
          const columnContent = dropColumn.querySelector('.kanban-column-content');
          if (columnContent) {
            // Update card data
            draggedElement.dataset.status = newStatus;
            draggedElement.classList.remove('border-red-500', 'border-amber-500', 'border-blue-500', 'border-green-500');
            
            // Add appropriate border color for new column
            const borderClass = {
              'new': 'border-red-500',
              'contacted': 'border-amber-500', 
              'quoted': 'border-blue-500',
              'ready': 'border-green-500'
            }[newStatus] || 'border-gray-500';
            
            draggedElement.classList.add(borderClass);
            
            // Append to new column with smooth animation
            columnContent.appendChild(draggedElement);
            
            // Update column counts
            updateColumnCounts();
            
            showNotification(`Booking moved to ${newStatus}`, 'success');
          }
        } else {
          showNotification('Failed to update booking status', 'error');
        }
      } catch (error) {
        console.error('Error updating booking status:', error);
        showNotification('Error updating booking', 'error');
      }
      
      draggedElement.style.opacity = '1';
      dropColumn.classList.remove('drag-over-active');
    }

    // =============================================================================
    // EVENT HANDLERS
    // =============================================================================

    function handleSearch(e: Event) {
      const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
      const cards = document.querySelectorAll('.booking-card');
      
      cards.forEach(card => {
        const text = card.textContent?.toLowerCase() || '';
        const isVisible = text.includes(searchTerm);
        (card as HTMLElement).style.display = isVisible ? 'block' : 'none';
      });
    }

    async function handleQuoteAmountChange(e: Event) {
      const input = e.target as HTMLInputElement;
      const bookingId = input.dataset.bookingId;
      const amount = parseFloat(input.value);
      
      if (!bookingId || isNaN(amount) || amount < 0) return;
      
      try {
        const success = await updateQuoteAmount(bookingId, amount);
        if (success) {
          showNotification('Quote amount updated', 'success');
        }
      } catch (error) {
        console.error('Error updating quote amount:', error);
        showNotification('Failed to update quote amount', 'error');
      }
    }

    async function handleQuoteStatusChange(e: Event) {
      e.stopPropagation();
      const btn = e.target as HTMLElement;
      const bookingId = btn.dataset.bookingId;
      const quoteStatus = btn.dataset.quoteStatus;
      
      if (!bookingId || !quoteStatus) return;
      
      try {
        const success = await updateQuoteStatus(bookingId, quoteStatus);
        if (success) {
          // Update UI
          const card = btn.closest('.booking-card');
          const statusElement = card?.querySelector('.quote-status');
          if (statusElement) {
            statusElement.textContent = quoteStatus;
            statusElement.className = `quote-status text-xs px-2 py-1 rounded font-medium ${
              quoteStatus === 'accepted' ? 'bg-green-700 text-green-200' :
              quoteStatus === 'rejected' ? 'bg-red-700 text-red-200' :
              quoteStatus === 'negotiating' ? 'bg-yellow-700 text-yellow-200' :
              'bg-gray-700 text-gray-300'
            }`;
          }
          showNotification(`Quote marked as ${quoteStatus}`, 'success');
        }
      } catch (error) {
        console.error('Error updating quote status:', error);
        showNotification('Failed to update quote status', 'error');
      }
    }

    async function handlePriorityChange(e: Event) {
      e.stopPropagation();
      const btn = e.target as HTMLElement;
      const bookingId = btn.dataset.bookingId;
      const newPriority = btn.dataset.newPriority;
      
      if (!bookingId || !newPriority) return;
      
      try {
        const success = await updateBookingPriority(bookingId, newPriority);
        if (success) {
          showNotification(`Priority set to ${newPriority}`, 'success');
          setTimeout(() => window.location.reload(), 1000);
        }
      } catch (error) {
        console.error('Error updating priority:', error);
        showNotification('Failed to update priority', 'error');
      }
    }

    // =============================================================================
    // API FUNCTIONS
    // =============================================================================

    async function updateBookingStatus(bookingId: string, newStatus: string): Promise<boolean> {
      try {
        const response = await fetch('/api/staff/bookings/status', {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bookingId, status: newStatus }),
        });
        return response.ok;
      } catch (error) {
        console.error('Error updating status:', error);
        return false;
      }
    }

    async function updateQuoteAmount(bookingId: string, amount: number): Promise<boolean> {
      try {
        const response = await fetch('/api/staff/bookings/quote', {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bookingId, quoteAmount: amount }),
        });
        return response.ok;
      } catch (error) {
        console.error('Error updating quote amount:', error);
        return false;
      }
    }

    async function updateQuoteStatus(bookingId: string, quoteStatus: string): Promise<boolean> {
      try {
        const response = await fetch('/api/staff/bookings/quote', {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bookingId, quoteStatus }),
        });
        return response.ok;
      } catch (error) {
        console.error('Error updating quote status:', error);
        return false;
      }
    }

    async function updateBookingPriority(bookingId: string, priority: string): Promise<boolean> {
      try {
        const response = await fetch('/api/staff/bookings/priority', {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bookingId, priority }),
        });
        return response.ok;
      } catch (error) {
        console.error('Error updating priority:', error);
        return false;
      }
    }

    async function scheduleFollowUp(bookingId: string, followUpDate: string): Promise<boolean> {
      try {
        const response = await fetch('/api/staff/bookings/follow-up', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bookingId, followUpDate }),
        });
        return response.ok;
      } catch (error) {
        console.error('Error scheduling follow-up:', error);
        return false;
      }
    }

    async function completeFirstClean(bookingId: string): Promise<boolean> {
      try {
        const response = await fetch('/api/staff/bookings/complete-first', {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bookingId, firstCleanCompleted: true, firstCleanDate: new Date().toISOString() }),
        });
        return response.ok;
      } catch (error) {
        console.error('Error completing first clean:', error);
        return false;
      }
    }

    async function archiveBooking(bookingId: string): Promise<boolean> {
      try {
        const response = await fetch('/api/staff/bookings/archive', {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bookingId }),
        });
        return response.ok;
      } catch (error) {
        console.error('Error archiving booking:', error);
        return false;
      }
    }

    // =============================================================================
    // ENHANCED EVENT HANDLERS
    // =============================================================================

    async function handleFollowUpSchedule(e: Event) {
      e.stopPropagation();
      const btn = e.target as HTMLElement;
      const bookingId = btn.dataset.bookingId;
      
      if (!bookingId) return;
      
      // Show date picker popup
      const followUpDate = prompt('Enter follow-up date (YYYY-MM-DD):');
      if (!followUpDate) return;
      
      try {
        const success = await scheduleFollowUp(bookingId, followUpDate);
        if (success) {
          showNotification('Follow-up scheduled', 'success');
          setTimeout(() => window.location.reload(), 1000);
        }
      } catch (error) {
        console.error('Error scheduling follow-up:', error);
        showNotification('Failed to schedule follow-up', 'error');
      }
    }

    async function handleQuoteAction(e: Event) {
      e.stopPropagation();
      const btn = e.target as HTMLElement;
      const bookingId = btn.dataset.bookingId;
      
      if (!bookingId) return;
      
      // Show quote amount input
      const quoteAmount = prompt('Enter quote amount (£):');
      if (!quoteAmount) return;
      
      const amount = parseFloat(quoteAmount);
      if (isNaN(amount) || amount <= 0) {
        showNotification('Please enter a valid amount', 'error');
        return;
      }
      
      try {
        const success = await updateQuoteAmount(bookingId, amount);
        if (success) {
          // Also update status to quoted
          await updateBookingStatus(bookingId, 'quoted');
          showNotification('Quote sent successfully', 'success');
          setTimeout(() => window.location.reload(), 1000);
        }
      } catch (error) {
        console.error('Error sending quote:', error);
        showNotification('Failed to send quote', 'error');
      }
    }

    async function handleCopyAction(e: Event) {
      e.stopPropagation();
      const btn = e.target as HTMLElement;
      const bookingId = btn.dataset.bookingId;
      
      if (!bookingId) return;
      
      try {
        const response = await fetch(`/api/staff/bookings/details?id=${bookingId}`);
        const booking = await response.json();
        
        const text = `${booking.full_name}
${booking.phone || 'No phone'}
${booking.property_type || 'Property type not specified'}
${booking.address || 'Address not provided'}, ${booking.postcode}
Services: Window Cleaning${booking.service_frequency ? ` (${booking.service_frequency})` : ''}
Quote: £${booking.quote_amount || booking.estimated_price || 'TBD'}
Status: ${booking.quote_status || 'Pending'}
${booking.staff_notes ? `Notes: ${booking.staff_notes}` : ''}`;

        await navigator.clipboard.writeText(text);
        showButtonFeedback(btn, 'Copied!');
        
      } catch (error) {
        console.error('Error copying booking:', error);
        showNotification('Failed to copy details', 'error');
      }
    }

    async function handleCompleteFirstClean(e: Event) {
      e.stopPropagation();
      const btn = e.target as HTMLElement;
      const bookingId = btn.dataset.bookingId;
      
      if (!bookingId) return;
      
      if (!confirm('Mark first clean as completed?')) return;
      
      try {
        const success = await completeFirstClean(bookingId);
        if (success) {
          showNotification('First clean marked as completed', 'success');
          setTimeout(() => window.location.reload(), 1000);
        }
      } catch (error) {
        console.error('Error completing first clean:', error);
        showNotification('Failed to complete first clean', 'error');
      }
    }

    async function handleArchiveBooking(e: Event) {
      e.stopPropagation();
      const btn = e.target as HTMLElement;
      const bookingId = btn.dataset.bookingId;
      
      if (!bookingId) return;
      
      if (!confirm('Archive this completed booking?')) return;
      
      try {
        const success = await archiveBooking(bookingId);
        if (success) {
          showNotification('Booking archived', 'success');
          // Remove card from UI
          const card = btn.closest('.booking-card');
          card?.remove();
          updateColumnCounts();
        }
      } catch (error) {
        console.error('Error archiving booking:', error);
        showNotification('Failed to archive booking', 'error');
      }
    }

    async function handleRequestFeedback(e: Event) {
      e.stopPropagation();
      const btn = e.target as HTMLElement;
      const bookingId = btn.dataset.bookingId;
      
      // This would typically send an email or SMS to request feedback
      showNotification('Feedback request sent to customer', 'success');
    }

    async function handleScheduleNextService(e: Event) {
      e.stopPropagation();
      const btn = e.target as HTMLElement;
      const bookingId = btn.dataset.bookingId;
      
      // This would create a new booking for the next service
      showNotification('Next service scheduled', 'success');
    }

    async function handleStatusUpdate(e: Event) {
      e.stopPropagation();
      const btn = e.target as HTMLElement;
      const bookingId = btn.dataset.bookingId;
      const newStatus = btn.dataset.newStatus;
      
      if (!bookingId || !newStatus) return;
      
      try {
        const success = await updateBookingStatus(bookingId, newStatus);
        if (success) {
          showNotification(`Status updated to ${newStatus}`, 'success');
          setTimeout(() => window.location.reload(), 1000);
        }
      } catch (error) {
        console.error('Error updating status:', error);
        showNotification('Failed to update status', 'error');
      }
    }

    function handleKeyboardShortcuts(e: KeyboardEvent) {
      // Implement keyboard shortcuts for power users
      if (e.ctrlKey || e.metaKey) {
        switch(e.key) {
          case 'f':
            e.preventDefault();
            document.getElementById('search-input')?.focus();
            break;
          case 'r':
            e.preventDefault();
            window.location.reload();
            break;
        }
      }
    }

    // =============================================================================
    // UTILITY FUNCTIONS
    // =============================================================================

    function showNotification(message: string, type: 'success' | 'error' | 'info' = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white font-medium transition-all duration-300 ${
        type === 'success' ? 'bg-green-600' :
        type === 'error' ? 'bg-red-600' : 'bg-blue-600'
      }`;
      notification.textContent = message;
      
      // Add to DOM
      document.body.appendChild(notification);
      
      // Remove after 3 seconds
      setTimeout(() => {
        notification.classList.add('opacity-0', 'translate-x-full');
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }

    function showButtonFeedback(button: HTMLElement, message: string) {
      const originalContent = button.innerHTML;
      button.innerHTML = message;
      button.classList.add('bg-green-600');
      
      setTimeout(() => {
        button.innerHTML = originalContent;
        button.classList.remove('bg-green-600');
      }, 2000);
    }

    function updateColumnCounts() {
      const columns = ['new', 'contacted', 'quoted', 'ready'];
      
      columns.forEach(status => {
        const column = document.querySelector(`[data-status="${status}"]`);
        const cards = column?.querySelectorAll('.booking-card').length || 0;
        const badge = column?.querySelector('span');
        
        if (badge) {
          badge.textContent = cards.toString();
        }
      });
    }

    function debounce(func: Function, delay: number) {
      let timeoutId: number;
      return function (...args: any[]) {
        clearTimeout(timeoutId);
        timeoutId = window.setTimeout(() => func.apply(this, args), delay);
      };
    }

    // Enhanced booking details modal
    async function showBookingDetails(bookingId: string) {
      try {
        const response = await fetch(`/api/staff/bookings/details?id=${bookingId}`);
        const booking = await response.json();
        
        const modalContent = document.getElementById('modal-content');
        if (modalContent) {
          modalContent.innerHTML = `
            <div class="space-y-4">
              <div class="bg-gray-700 rounded-lg p-4">
                <h3 class="font-semibold text-white mb-2">Customer Information</h3>
                <div class="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <p class="text-gray-400">Name</p>
                    <p class="text-white">${booking.full_name}</p>
                  </div>
                  <div>
                    <p class="text-gray-400">Phone</p>
                    <p class="text-white">
                      <a href="tel:${booking.phone}" class="hover:text-blue-400">
                        ${booking.phone || 'Not provided'}
                      </a>
                    </p>
                  </div>
                  <div>
                    <p class="text-gray-400">Email</p>
                    <p class="text-white">
                      <a href="mailto:${booking.email}" class="hover:text-blue-400">
                        ${booking.email || 'Not provided'}
                      </a>
                    </p>
                  </div>
                  <div>
                    <p class="text-gray-400">Postcode</p>
                    <p class="text-white">${booking.postcode}</p>
                  </div>
                </div>
              </div>
              
              <div class="bg-gray-700 rounded-lg p-4">
                <h3 class="font-semibold text-white mb-2">Quote & Service Details</h3>
                <div class="space-y-2 text-sm">
                  <p><span class="text-gray-400">Status:</span> <span class="text-white capitalize">${booking.status}</span></p>
                  <p><span class="text-gray-400">Quote Amount:</span> <span class="text-green-400 font-semibold">£${booking.quote_amount || booking.estimated_price || 'TBD'}</span></p>
                  <p><span class="text-gray-400">Quote Status:</span> 
                    <span class="px-2 py-1 rounded text-xs font-medium ${
                      booking.quote_status === 'accepted' ? 'bg-green-700 text-green-200' :
                      booking.quote_status === 'rejected' ? 'bg-red-700 text-red-200' :
                      booking.quote_status === 'negotiating' ? 'bg-yellow-700 text-yellow-200' :
                      'bg-gray-600 text-gray-300'
                    }">
                      ${booking.quote_status || 'pending'}
                    </span>
                  </p>
                  <p><span class="text-gray-400">Property:</span> <span class="text-white">${booking.property_type || 'Not specified'}</span></p>
                  <p><span class="text-gray-400">Service Frequency:</span> <span class="text-white">${booking.service_frequency || 'Not specified'}</span></p>
                  <p><span class="text-gray-400">Priority:</span> 
                    <span class="px-2 py-1 rounded text-xs font-medium ${
                      booking.priority === 'urgent' ? 'bg-red-700 text-red-200' :
                      booking.priority === 'high' ? 'bg-orange-700 text-orange-200' :
                      booking.priority === 'low' ? 'bg-blue-700 text-blue-200' :
                      'bg-gray-600 text-gray-300'
                    }">
                      ${booking.priority || 'normal'}
                    </span>
                  </p>
                  ${booking.follow_up_date ? `<p><span class="text-gray-400">Follow-up:</span> <span class="text-yellow-400">${new Date(booking.follow_up_date).toLocaleDateString()}</span></p>` : ''}
                  ${booking.first_clean_completed ? `<p><span class="text-gray-400">First Clean:</span> <span class="text-green-400">✓ Completed ${booking.first_clean_date ? new Date(booking.first_clean_date).toLocaleDateString() : ''}</span></p>` : ''}
                  ${booking.next_service_date ? `<p><span class="text-gray-400">Next Service:</span> <span class="text-purple-400">${new Date(booking.next_service_date).toLocaleDateString()}</span></p>` : ''}
                  <p><span class="text-gray-400">Created:</span> <span class="text-white">${new Date(booking.created_at).toLocaleString()}</span></p>
                </div>
              </div>
              
              <div class="bg-gray-700 rounded-lg p-4">
                <h3 class="font-semibold text-white mb-2">Internal Notes</h3>
                <textarea 
                  id="notes-textarea"
                  class="w-full bg-gray-600 text-white rounded p-2 text-sm"
                  rows="4"
                  placeholder="Add internal staff notes here..."
                >${booking.staff_notes || ''}</textarea>
                <button 
                  onclick="saveNotes('${bookingId}')"
                  class="mt-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium py-2 px-4 rounded transition-colors"
                >
                  Save Notes
                </button>
              </div>
              
              ${booking.quote_history && booking.quote_history.length > 0 ? `
                <div class="bg-gray-700 rounded-lg p-4">
                  <h3 class="font-semibold text-white mb-2">Quote History</h3>
                  <div class="space-y-2 text-xs">
                    ${booking.quote_history.map((entry: any) => `
                      <div class="flex justify-between items-center py-1 border-b border-gray-600">
                        <span class="text-gray-300">${new Date(entry.timestamp).toLocaleString()}</span>
                        <span class="text-white">
                          ${entry.old_amount ? `£${entry.old_amount}` : 'No amount'} → 
                          ${entry.new_amount ? `£${entry.new_amount}` : 'No amount'}
                          (${entry.old_status || 'pending'} → ${entry.new_status || 'pending'})
                        </span>
                      </div>
                    `).join('')}
                  </div>
                </div>
              ` : ''}
            </div>
          `;
        }
        
        document.getElementById('booking-modal')?.classList.remove('hidden');
      } catch (error) {
        console.error('Error fetching booking details:', error);
        showNotification('Failed to load booking details', 'error');
      }
    }

    // Save notes function
    window.saveNotes = async function(bookingId: string) {
      const textarea = document.getElementById('notes-textarea') as HTMLTextAreaElement;
      const notes = textarea.value;
      
      try {
        const response = await fetch('/api/staff/bookings/notes', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bookingId, notes }),
        });
        
        if (response.ok) {
          // Show success feedback
          const btn = event?.target as HTMLButtonElement;
          if (btn) {
            const originalText = btn.textContent;
            btn.textContent = 'Saved!';
            btn.classList.add('bg-green-600');
            setTimeout(() => {
              btn.textContent = originalText || 'Save Notes';
              btn.classList.remove('bg-green-600');
            }, 2000);
          }
        }
      } catch (error) {
        console.error('Error saving notes:', error);
        showNotification('Failed to save notes', 'error');
      }
    };

    // New Customer Modal Functionality
    const newCustomerBtn = document.getElementById('new-customer-btn');
    const newCustomerModal = document.getElementById('new-customer-modal');
    const closeModalBtn = document.getElementById('close-modal-btn');
    const cancelBtn = document.getElementById('cancel-btn');
    const newCustomerForm = document.getElementById('new-customer-form');

    // Show modal
    newCustomerBtn?.addEventListener('click', () => {
      newCustomerModal?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    });

    // Hide modal
    const hideModal = () => {
      newCustomerModal?.classList.add('hidden');
      document.body.style.overflow = 'auto';
      newCustomerForm?.reset();
    };

    closeModalBtn?.addEventListener('click', hideModal);
    cancelBtn?.addEventListener('click', hideModal);

    // Close modal when clicking outside
    newCustomerModal?.addEventListener('click', (e) => {
      if (e.target === newCustomerModal) {
        hideModal();
      }
    });

    // Calculate total price function
    const calculateTotalPrice = () => {
      let total = 0;
      
      // Add window cleaning base price if selected
      const windowCleaningCheckbox = document.getElementById('window-cleaning') as HTMLInputElement;
      const estimatedPriceInput = document.getElementById('estimated-price') as HTMLInputElement;
      
      if (windowCleaningCheckbox?.checked) {
        // You can set a base price for window cleaning here or get it from somewhere
        total += 20; // Base window cleaning price
      }
      
      // Add additional services
      const services = [
        { checkbox: 'gutter-service', price: 'gutter-price' },
        { checkbox: 'conservatory-service', price: 'conservatory-price' },
        { checkbox: 'fascia-service', price: 'fascia-price' },
        { checkbox: 'pressure-service', price: 'pressure-price' }
      ];
      
      services.forEach(service => {
        const checkbox = document.getElementById(service.checkbox) as HTMLInputElement;
        const priceInput = document.getElementById(service.price) as HTMLInputElement;
        
        if (checkbox?.checked && priceInput?.value) {
          total += parseFloat(priceInput.value);
        }
      });
      
      // Update total display
      const totalDisplay = document.getElementById('total-price');
      if (totalDisplay) {
        totalDisplay.textContent = total.toFixed(2);
      }
      
      // Update estimated price if it's empty
      if (estimatedPriceInput && !estimatedPriceInput.value) {
        estimatedPriceInput.placeholder = `Auto calculated: £${total.toFixed(2)}`;
      }
    };

    // Add event listeners for price calculation
    document.getElementById('window-cleaning')?.addEventListener('change', calculateTotalPrice);
    document.querySelectorAll('.service-checkbox').forEach(checkbox => {
      checkbox.addEventListener('change', calculateTotalPrice);
    });
    document.querySelectorAll('.service-price').forEach(input => {
      input.addEventListener('input', calculateTotalPrice);
    });

    // Calculate initial price
    calculateTotalPrice();

    // Handle form submission
    newCustomerForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitBtn = document.getElementById('save-customer-btn');
      if (!submitBtn) return;

      // Custom validation
      const email = (document.getElementById('customer-email') as HTMLInputElement)?.value;
      const phone = (document.getElementById('customer-phone') as HTMLInputElement)?.value;
      const contactMethod = (document.getElementById('contact-method') as HTMLSelectElement)?.value;

      // Validate at least one contact method
      if (!email && !phone) {
        showNotification('Please provide either an email or phone number', 'error');
        return;
      }

      // Validate contact method matches provided info
      if (contactMethod === 'email' && !email) {
        showNotification('Email is required when email is the preferred contact method', 'error');
        return;
      }
      if (contactMethod === 'phone' && !phone) {
        showNotification('Phone is required when phone is the preferred contact method', 'error');
        return;
      }

      // Show loading state
      const originalText = submitBtn.textContent;
      submitBtn.textContent = 'Adding Customer...';
      submitBtn.disabled = true;

      try {
        // Collect form data
        const formData = new FormData(e.target as HTMLFormElement);
        
        // Collect services information
        const additionalServices = Array.from(
          document.querySelectorAll('input[name="additional_services"]:checked')
        ).map((checkbox: HTMLInputElement) => checkbox.value);
        
        // Collect service frequencies
        const serviceFrequencies = {};
        additionalServices.forEach(service => {
          const freqSelect = document.querySelector(`select[name="${service}_frequency"]`) as HTMLSelectElement;
          if (freqSelect) {
            serviceFrequencies[service] = freqSelect.value;
          }
        });

        const windowCleaning = (document.getElementById('window-cleaning') as HTMLInputElement)?.checked;
        
        const bookingData = {
          full_name: formData.get('full_name'),
          email: email || null,
          phone: phone || null,
          address: formData.get('address'),
          city: formData.get('city'),
          postcode: formData.get('postcode'),
          property_type: formData.get('property_type'),
          contact_method: formData.get('contact_method'),
          frequency: formData.get('frequency'),
          estimated_price: formData.get('estimated_price') ? parseFloat(formData.get('estimated_price') as string) : null,
          agreed_price: formData.get('agreed_price') ? parseFloat(formData.get('agreed_price') as string) : null,
          notes: formData.get('notes'),
          window_cleaning: windowCleaning,
          additional_services: additionalServices,
          service_frequencies: serviceFrequencies,
          source: 'staff_portal',
          status: 'new'
        };

        // Submit to API
        const response = await fetch('/api/staff/add-booking', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(bookingData)
        });

        const result = await response.json();

        if (result.success) {
          showNotification(`Customer ${bookingData.full_name} added successfully!`, 'success');
          hideModal();
          // Refresh the page to show the new booking
          window.location.reload();
        } else {
          throw new Error(result.error || 'Failed to add customer');
        }

      } catch (error) {
        console.error('Error adding customer:', error);
        showNotification(`Failed to add customer: ${error.message}`, 'error');
      } finally {
        // Restore button state
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
      }
    });

    // Add CSS for drag and drop visual feedback
    const style = document.createElement('style');
    style.textContent = `
      .drag-over-possible {
        background-color: rgba(59, 130, 246, 0.1) !important;
        border-color: #3b82f6 !important;
      }
      
      .drag-over-active {
        background-color: rgba(34, 197, 94, 0.2) !important;
        border-color: #22c55e !important;
        transform: scale(1.02);
      }
      
      .booking-card.dragging {
        opacity: 0.5;
        transform: rotate(5deg);
      }
      
      .booking-card {
        position: relative;
        transition: all 0.2s ease;
      }
      
      .booking-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
      }
      
      .quote-input:focus {
        background-color: rgba(34, 197, 94, 0.1) !important;
      }
    `;
    document.head.appendChild(style);
  </script>
</StaffLayout>